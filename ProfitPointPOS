<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bitlynx POS Pro - Complete System</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- React and ReactDOM -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Babel for JSX transformation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- jsPDF for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>

    <!-- Chart.js for analytics -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- SheetJS for CSV export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <style>
        /* Custom styles for Bitlynx POS Pro */
        .receipt-print {
            font-family: 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.2;
            max-width: 300px;
            margin: 0 auto;
        }

        @media print {
            body * {
                visibility: hidden;
            }

            .receipt-print,
            .receipt-print * {
                visibility: visible;
            }

            .receipt-print {
                position: absolute;
                left: 0;
                top: 0;
            }
        }

        /* Custom scrollbar */
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Custom colors for Bitlynx POS Pro */
        .bitlynx-primary {
            background-color: #1e40af;
        }

        .bitlynx-primary:hover {
            background-color: #1e3a8a;
        }

        .bitlynx-secondary {
            background-color: #0f766e;
        }

        .bitlynx-secondary:hover {
            background-color: #0d5e59;
        }

        /* Manager-specific styles */
        .manager-sidebar {
            width: 250px;
            transition: all 0.3s;
        }

        .manager-sidebar.collapsed {
            width: 70px;
        }

        .manager-content {
            margin-left: 250px;
            transition: all 0.3s;
        }

        .manager-content.expanded {
            margin-left: 70px;
        }

        /* Dashboard cards */
        .dashboard-card {
            transition: transform 0.2s;
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 8px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        /* Animation for toasts */
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .toast-enter {
            animation: slideIn 0.3s ease-out forwards;
        }

        /* Loading spinner */
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #3b82f6;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Ensure table is scrollable */
        .table-container {
            max-height: 70vh;
            overflow-y: auto;
        }

        /* Theme color variables */
        :root {
            --primary-color: #1e40af;
            --secondary-color: #0f766e;
            --accent-color: #3b82f6;
            --background-color: #f9fafb;
            --text-color: #1f2937;
        }

        .theme-blue {
            --primary-color: #1e40af;
            --secondary-color: #0f766e;
            --accent-color: #3b82f6;
        }

        .theme-green {
            --primary-color: #059669;
            --secondary-color: #0d9488;
            --accent-color: #10b981;
        }

        .theme-purple {
            --primary-color: #7c3aed;
            --secondary-color: #a855f7;
            --accent-color: #8b5cf6;
        }

        .theme-orange {
            --primary-color: #ea580c;
            --secondary-color: #dc2626;
            --accent-color: #f97316;
        }

        /* Wallpaper styles */
        .pos-with-wallpaper {
            position: relative;
            min-height: 100vh;
        }

        .pos-wallpaper {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            z-index: -1;
            opacity: 0.1;
        }

        .pos-content {
            position: relative;
            z-index: 1;
        }

        /* Receipt customization preview */
        .receipt-preview {
            font-family: 'Courier New', monospace;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            max-width: 300px;
            margin: 0 auto;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        /* Chart container */
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }

        /* Use CSS vars for buttons to match theme */
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: color-mix(in srgb, var(--primary-color) 90%, black);
        }

        .btn-secondary {
            background-color: var(--secondary-color);
            color: white;
        }

        .btn-secondary:hover {
            background-color: color-mix(in srgb, var(--secondary-color) 90%, black);
        }

        .btn-accent {
            background-color: var(--accent-color);
            color: white;
        }

        .btn-accent:hover {
            background-color: color-mix(in srgb, var(--accent-color) 90%, black);
        }

        /* Quick access card styles */
        .quick-access-card {
            transition: all 0.2s ease;
            min-height: 100px;
        }

        .quick-access-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        /* Mobile payment styles */
        .mobile-payment-btn {
            transition: all 0.2s ease;
        }

        .mobile-payment-btn:hover {
            transform: translateY(-2px);
        }

        /* Category section styles */
        .category-section {
            margin-bottom: 2rem;
        }

        .category-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e5e7eb;
        }

        .category-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
        }

        /* Enhanced Dashboard Styles */
        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            overflow: hidden;
        }

        .stat-card:nth-child(2) {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .stat-card:nth-child(3) {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

        .stat-card:nth-child(4) {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        }

        .stat-card:nth-child(5) {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        }

        .progress-bar {
            height: 8px;
            border-radius: 4px;
            background-color: #e5e7eb;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.5s ease;
        }

        .trend-up {
            color: #10b981;
        }

        .trend-down {
            color: #ef4444;
        }

        .notification-dot {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #ef4444;
        }

        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        /* Animation for cards */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeIn 0.5s ease forwards;
        }

        .delay-1 {
            animation-delay: 0.1s;
        }

        .delay-2 {
            animation-delay: 0.2s;
        }

        .delay-3 {
            animation-delay: 0.3s;
        }

        .delay-4 {
            animation-delay: 0.4s;
        }

        /* KPI badges */
        .kpi-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .kpi-positive {
            background-color: #d1fae5;
            color: #065f46;
        }

        .kpi-negative {
            background-color: #fee2e2;
            color: #991b1b;
        }

        /* Status indicators */
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-online {
            background-color: #10b981;
        }

        .status-offline {
            background-color: #ef4444;
        }

        .status-idle {
            background-color: #f59e0b;
        }

        /* Enhanced Login Styles */
        .glass-effect {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .glass-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Floating animation */
        @keyframes float {

            0%,
            100% {
                transform: translateY(0px);
            }

            50% {
                transform: translateY(-10px);
            }
        }

        .float-animation {
            animation: float 3s ease-in-out infinite;
        }

        /* Custom input focus effects */
        .login-input:focus {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        /* Gradient text */
        .gradient-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Enhanced button hover effects */
        .login-btn {
            position: relative;
            overflow: hidden;
        }

        .login-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .login-btn:hover::before {
            left: 100%;
        }

        /* Video background styles */
        .video-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -2;
        }

        .video-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.4);
            z-index: -1;
        }

        /* Add this to your existing CSS */
        .pos-operator-bg {
            background: transparent !important;
        }

        .pos-content-transparent {
            background: transparent !important;
        }

        .pos-header-transparent {
            background: rgba(255, 255, 255, 0.9) !important;
            backdrop-filter: blur(10px);
        }

        .pos-cart-transparent {
            background: rgba(255, 255, 255, 0.95) !important;
            backdrop-filter: blur(10px);
        }

        .product-card-transparent {
            background: rgba(255, 255, 255, 0.9) !important;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .quick-access-transparent {
            background: rgba(255, 255, 255, 0.85) !important;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        /* Enhanced glass morphism effects */
        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }

        .glass-effect-light {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Ensure wallpaper is properly layered */
        .pos-with-wallpaper {
            position: relative;
            min-height: 100vh;
        }

        .pos-wallpaper {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            z-index: -1;
        }

        .pos-content-transparent {
            position: relative;
            z-index: 1;
        }
    </style>
</head>

<body class="bg-gray-100">
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useCallback, useMemo, useRef } = React;
        const { jsPDF } = window.jspdf;

        // Safe localStorage functions
        const safeParseJSON = (key, defaultValue = []) => {
            try {
                const item = localStorage.getItem(key);
                return item ? JSON.parse(item) : defaultValue;
            } catch (error) {
                console.error(`Error parsing ${key} from localStorage:`, error);
                return defaultValue;
            }
        };

        const safeSetJSON = (key, value) => {
            try {
                localStorage.setItem(key, JSON.stringify(value));
                return true;
            } catch (error) {
                console.error(`Error saving ${key} to localStorage:`, error);
                return false;
            }
        };

        // Generate unique IDs
        const generateId = () => Date.now().toString(36) + Math.random().toString(36).substr(2);

        // Format currency (Tanzanian Shillings)
        const formatCurrency = (amount) => {
            if (typeof amount !== 'number' || isNaN(amount)) return 'TZS 0';
            return `TZS ${amount.toLocaleString()}`;
        };

        // Format date
        const formatDate = (date) => {
            try {
                return new Date(date).toLocaleDateString('en-GB');
            } catch (error) {
                return new Date().toLocaleDateString('en-GB');
            }
        };

        // Format time
        const formatTime = (date) => {
            try {
                return new Date(date).toLocaleTimeString('en-GB', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (error) {
                return new Date().toLocaleTimeString('en-GB', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
        };

        // Format date and time
        const formatDateTime = (date) => {
            return `${formatDate(date)} ${formatTime(date)}`;
        };

        // Calculate profit per item
        const calculateProfit = (buyPrice, sellPrice) => {
            const bp = parseFloat(buyPrice) || 0;
            const sp = parseFloat(sellPrice) || 0;
            return sp - bp;
        };

        // Check if expiry is soon (within 7 days)
        const isExpiringSoon = (expiryDate) => {
            if (!expiryDate) return false;
            try {
                const expiry = new Date(expiryDate);
                const now = new Date();
                const diffTime = expiry - now;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                return diffDays <= 7 && diffDays > 0;
            } catch (error) {
                return false;
            }
        };

        // ABC Analysis
        const performABC = (products) => {
            if (!products || !Array.isArray(products)) return [];

            const productsWithValue = products
                .filter(p => p && p.items_sold > 0)
                .map(p => ({
                    ...p,
                    value: (p.sell_price || 0) * (p.items_sold || 0)
                }))
                .sort((a, b) => (b.value || 0) - (a.value || 0));

            let totalValue = productsWithValue.reduce((sum, p) => sum + (p.value || 0), 0);
            if (totalValue === 0) return productsWithValue.map(p => ({ ...p, abc_category: 'C' }));

            let cumulative = 0;
            let aThreshold = totalValue * 0.8;
            let bThreshold = totalValue * 0.95;

            return productsWithValue.map(p => {
                cumulative += p.value || 0;
                let category = 'C';
                if (cumulative <= aThreshold) category = 'A';
                else if (cumulative <= bThreshold) category = 'B';
                return { ...p, abc_category: category };
            });
        };

        // Toast Component
        const Toast = ({ message, type }) => {
            const bgColor = type === 'error' ? 'bg-red-500' : 'bg-green-500';

            return (
                <div className={`${bgColor} text-white px-4 py-2 rounded-lg shadow-lg toast-enter`}>
                    {message}
                </div>
            );
        };

        // Enhanced Login Component with Video Background - FIXED
        const LoginView = ({ onLogin }) => {
            const [username, setUsername] = useState('');
            const [password, setPassword] = useState('');
            const [error, setError] = useState('');
            const [isLoading, setIsLoading] = useState(false);
            const [showPassword, setShowPassword] = useState(false);
            const [videoError, setVideoError] = useState(false);

            const handleLogin = (e) => {
                e.preventDefault();
                setIsLoading(true);
                setError('');

                // Simulate API call
                setTimeout(() => {
                    // Demo credentials
                    if ((username === 'operator' && password === 'operator123') ||
                        (username === 'manager' && password === 'manager123')) {

                        const user = {
                            id: generateId(),
                            username: username,
                            display_name: username === 'operator' ? 'POS Operator' : 'Store Manager',
                            role: username === 'operator' ? 'operator' : 'manager',
                            permissions: username === 'operator' ? ['pos', 'view_sales'] : ['all'],
                            loginTime: new Date().toISOString()
                        };

                        safeSetJSON('currentUser', user);
                        localStorage.setItem('userLoginTime', new Date().toISOString());
                        onLogin(user);
                    } else {
                        setError('Invalid username or password');
                    }
                    setIsLoading(false);
                }, 1000);
            };

            const handleVideoError = () => {
                setVideoError(true);
            };

            return (
                <div className="min-h-screen flex items-center justify-center p-4 relative overflow-hidden">
                    <div className="video-background">
                        {!videoError ? (
                            <video
                                autoPlay
                                muted
                                loop
                                className="video-background"
                                onError={handleVideoError}
                                poster="images/wallaper1.jpg"
                            >
                                <source src="images/video.mp4" type="video/mp4" />
                                <source src="images/video.webm" type="video/webm" />
                            </video>
                        ) : (
                            <div
                                className="video-background"
                                style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}
                            />
                        )}
                    </div>

                    {/* Dark overlay */}
                    <div className="video-overlay"></div>

                    {/* Animated Background Elements */}
                    <div className="absolute inset-0 overflow-hidden">
                        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
                        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-1000"></div>
                        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-500"></div>
                    </div>

                    <div className="relative w-full max-w-md z-10">
                        {/* Main Login Card */}
                        <div className="glass-effect rounded-3xl shadow-2xl border border-white/20 overflow-hidden">
                            {/* Header Section with Logo */}
                            <div className="bg-glass-effect p-8 text-center">
                                <div className="flex justify-center mb-4">
                                    <div className="relative">
                                        {/* Logo Container */}
                                        <div className="w-22 h-22  backdrop-blur-sm  shadow-lg flex items-center justify-center  hover:rotate-0 transition-transform duration-300 overflow-hidden">
                                            <img
                                                src="images/ProfitPointPOS Logo Design.png"           // or "/bitlynx-pos/images/ProfitPointPOS.png"
                                                alt="ProfitPointPOS Logo"
                                                className="w-full h-full object-contain p-2"
                                                draggable="false"
                                            />
                                        </div>

                                        {/* Animated Ring */}
                                        <div className="absolute inset-0 border-4 border-white/30 rounded-2xl animate-ping pointer-events-none"></div>
                                    </div>
                                </div>
                            </div>

                            {/* Login Form */}
                            <div className="p-8">
                                <form onSubmit={handleLogin} className="space-y-6">
                                    {/* Username Field */}
                                    <div className="space-y-2">
                                        <label className="flex items-center text-sm font-medium text-white">
                                            <i className="fas fa-user mr-2 text-blue-400"></i>
                                            Username
                                        </label>
                                        <div className="relative">
                                            <input
                                                type="text"
                                                value={username}
                                                onChange={(e) => setUsername(e.target.value)}
                                                className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 login-input"
                                                placeholder="Enter your username"
                                                required
                                                aria-label="Username"
                                                disabled={isLoading}
                                            />
                                            <div className="absolute right-3 top-3 text-gray-300">
                                                <i className="fas fa-user-circle"></i>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Password Field */}
                                    <div className="space-y-2">
                                        <label className="flex items-center text-sm font-medium text-white">
                                            <i className="fas fa-lock mr-2 text-blue-400"></i>
                                            Password
                                        </label>
                                        <div className="relative">
                                            <input
                                                type={showPassword ? "text" : "password"}
                                                value={password}
                                                onChange={(e) => setPassword(e.target.value)}
                                                className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 login-input"
                                                placeholder="Enter your password"
                                                required
                                                aria-label="Password"
                                                disabled={isLoading}
                                            />
                                            <button
                                                type="button"
                                                onClick={() => setShowPassword(!showPassword)}
                                                className="absolute right-3 top-3 text-gray-300 hover:text-white transition-colors"
                                                aria-label={showPassword ? "Hide password" : "Show password"}
                                                disabled={isLoading}
                                            >
                                                <i className={`fas ${showPassword ? "fa-eye-slash" : "fa-eye"}`}></i>
                                            </button>
                                        </div>
                                    </div>

                                    {/* Error Message */}
                                    {error && (
                                        <div className="bg-red-500/20 border border-red-500/30 text-red-200 px-4 py-3 rounded-lg flex items-center" role="alert">
                                            <i className="fas fa-exclamation-triangle mr-2"></i>
                                            {error}
                                        </div>
                                    )}

                                    {/* Login Button */}
                                    <button
                                        type="submit"
                                        disabled={isLoading}
                                        className="w-full bg-gradient-to-br from-slate-800 via-blue-800  hover:from-blue-700 hover:to-purple-700 text-white py-3 px-4 rounded-xl font-semibold focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02] flex items-center justify-center shadow-lg login-btn"
                                        aria-label="Sign In"
                                    >
                                        {isLoading ? (
                                            <>
                                                <div className="spinner mr-2"></div>
                                                Verifying User...
                                            </>
                                        ) : (
                                            <>
                                                <i className="fas fa-sign-in-alt mr-2"></i>
                                                Sign In
                                            </>
                                        )}
                                    </button>
                                </form>

                                {/* Footer */}
                                <div className="mt-6 text-center">
                                    <p className="text-gray-400 text-xs">
                                        Powered By Bitlynx • Version 2.1 Pro
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Floating Elements */}
                        <div className="absolute -z-10 top-10 -left-10 w-20 h-20 bg-blue-500/10 rounded-full blur-lg"></div>
                        <div className="absolute -z-10 bottom-10 -right-10 w-20 h-20 bg-purple-500/10 rounded-full blur-lg"></div>
                    </div>
                </div>
            );
        };

        // Modal Component
        const Modal = ({ isOpen, title, onClose, children, size = 'medium' }) => {
            if (!isOpen) return null;

            const sizeClasses = {
                small: 'max-w-md',
                medium: 'max-w-2xl',
                large: 'max-w-4xl',
                xlarge: 'max-w-6xl'
            };

            return (
                <div className="modal-overlay" role="dialog" aria-modal="true" aria-labelledby="modal-title">
                    <div className={`modal-content ${sizeClasses[size]}`}>
                        <div className="p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h2 id="modal-title" className="text-xl font-bold text-gray-800">{title}</h2>
                                <button
                                    onClick={onClose}
                                    className="text-gray-500 hover:text-gray-700 text-xl"
                                    aria-label="Close modal"
                                >
                                    <i className="fas fa-times"></i>
                                </button>
                            </div>
                            {children}
                        </div>
                    </div>
                </div>
            );
        };

        // User Modal Component
        const UserModal = ({ isOpen, onClose, onSave, user }) => {
            const [formData, setFormData] = useState({
                username: '',
                password: '',
                display_name: '',
                role: 'operator',
                status: 'active',
                permissions: ['pos', 'view_sales']
            });

            useEffect(() => {
                if (user) {
                    setFormData({
                        username: user.username || '',
                        password: user.password || '',
                        display_name: user.display_name || '',
                        role: user.role || 'operator',
                        status: user.status || 'active',
                        permissions: user.permissions || ['pos', 'view_sales']
                    });
                } else {
                    setFormData({
                        username: '',
                        password: '',
                        display_name: '',
                        role: 'operator',
                        status: 'active',
                        permissions: ['pos', 'view_sales']
                    });
                }
            }, [user, isOpen]);

            const handleChange = (e) => {
                const { name, value } = e.target;
                setFormData(prev => ({
                    ...prev,
                    [name]: value
                }));
            };

            const handlePermissionChange = (permission) => {
                setFormData(prev => {
                    const permissions = prev.permissions.includes(permission)
                        ? prev.permissions.filter(p => p !== permission)
                        : [...prev.permissions, permission];

                    return {
                        ...prev,
                        permissions
                    };
                });
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                onSave(formData);
            };

            const permissionOptions = [
                { key: 'pos', label: 'POS Access' },
                { key: 'view_sales', label: 'View Sales' },
                { key: 'manage_products', label: 'Manage Products' },
                { key: 'manage_users', label: 'Manage Users' },
                { key: 'view_reports', label: 'View Reports' },
                { key: 'all', label: 'All Permissions' }
            ];

            return (
                <Modal
                    isOpen={isOpen}
                    title={user ? 'Edit User' : 'Add New User'}
                    onClose={onClose}
                >
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Username</label>
                                <input
                                    type="text"
                                    name="username"
                                    value={formData.username}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter username"
                                    required
                                    aria-label="Username"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                                <input
                                    type="password"
                                    name="password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter password"
                                    required
                                    aria-label="Password"
                                />
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                            <input
                                type="text"
                                name="display_name"
                                value={formData.display_name}
                                onChange={handleChange}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Enter full name"
                                required
                                aria-label="Full Name"
                            />
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                                <select
                                    name="role"
                                    value={formData.role}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                    aria-label="Role"
                                >
                                    <option value="operator">Operator</option>
                                    <option value="manager">Manager</option>
                                    <option value="admin">Admin</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                                <select
                                    name="status"
                                    value={formData.status}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                    aria-label="Status"
                                >
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Permissions</label>
                            <div className="grid grid-cols-2 gap-2">
                                {permissionOptions.map(permission => (
                                    <div key={permission.key} className="flex items-center">
                                        <input
                                            type="checkbox"
                                            id={`permission-${permission.key}`}
                                            checked={formData.permissions.includes(permission.key)}
                                            onChange={() => handlePermissionChange(permission.key)}
                                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                            aria-label={`${permission.label} permission`}
                                        />
                                        <label htmlFor={`permission-${permission.key}`} className="ml-2 text-sm text-gray-700">
                                            {permission.label}
                                        </label>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label="Cancel"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label={user ? 'Update User' : 'Add User'}
                            >
                                {user ? 'Update User' : 'Add User'}
                            </button>
                        </div>
                    </form>
                </Modal>
            );
        };

        // Product Modal Component
        const ProductModal = ({ isOpen, onClose, onSave, product }) => {
            const [formData, setFormData] = useState({
                barcode: '',
                name: '',
                category: '',
                description: '',
                buy_price: '',
                sell_price: '',
                available_stock: '',
                reorder_level: '',
                expiration_date: ''
            });

            useEffect(() => {
                if (product) {
                    setFormData({
                        barcode: product.barcode || '',
                        name: product.name || '',
                        category: product.category || '',
                        description: product.description || '',
                        buy_price: product.buy_price || '',
                        sell_price: product.sell_price || '',
                        available_stock: product.available_stock || '',
                        reorder_level: product.reorder_level || '',
                        expiration_date: product.expiration_date || ''
                    });
                } else {
                    setFormData({
                        barcode: '',
                        name: '',
                        category: '',
                        description: '',
                        buy_price: '',
                        sell_price: '',
                        available_stock: '',
                        reorder_level: '',
                        expiration_date: ''
                    });
                }
            }, [product, isOpen]);

            const handleChange = (e) => {
                const { name, value } = e.target;
                setFormData(prev => ({
                    ...prev,
                    [name]: value
                }));
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                onSave({
                    ...formData,
                    buy_price: parseFloat(formData.buy_price) || 0,
                    sell_price: parseFloat(formData.sell_price) || 0,
                    available_stock: parseInt(formData.available_stock) || 0,
                    reorder_level: parseInt(formData.reorder_level) || 0
                });
            };

            return (
                <Modal
                    isOpen={isOpen}
                    title={product ? 'Edit Product' : 'Add New Product'}
                    onClose={onClose}
                >
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                                <input
                                    type="text"
                                    name="name"
                                    value={formData.name}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter product name"
                                    required
                                    aria-label="Product Name"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Barcode</label>
                                <input
                                    type="text"
                                    name="barcode"
                                    value={formData.barcode}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter barcode"
                                    aria-label="Barcode"
                                />
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                                <select
                                    name="category"
                                    value={formData.category}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                    aria-label="Category"
                                >
                                    <option value="">Select Category</option>
                                    <option value="Bakery">Bakery</option>
                                    <option value="Dairy">Dairy</option>
                                    <option value="Grains">Grains</option>
                                    <option value="Cooking">Cooking</option>
                                    <option value="Groceries">Groceries</option>
                                    <option value="Beverages">Beverages</option>
                                    <option value="Personal Care">Personal Care</option>
                                    <option value="Fruits">Fruits</option>
                                    <option value="Vegetables">Vegetables</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Expiration Date</label>
                                <input
                                    type="date"
                                    name="expiration_date"
                                    value={formData.expiration_date}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    aria-label="Expiration Date"
                                />
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <textarea
                                name="description"
                                value={formData.description}
                                onChange={handleChange}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Enter product description"
                                rows="3"
                                aria-label="Description"
                            ></textarea>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Buy Price (TZS)</label>
                                <input
                                    type="number"
                                    name="buy_price"
                                    value={formData.buy_price}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="0.00"
                                    min="0"
                                    step="0.01"
                                    required
                                    aria-label="Buy Price"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Sell Price (TZS)</label>
                                <input
                                    type="number"
                                    name="sell_price"
                                    value={formData.sell_price}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="0.00"
                                    min="0"
                                    step="0.01"
                                    required
                                    aria-label="Sell Price"
                                />
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Stock Quantity</label>
                                <input
                                    type="number"
                                    name="available_stock"
                                    value={formData.available_stock}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="0"
                                    min="0"
                                    required
                                    aria-label="Stock Quantity"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Reorder Level</label>
                                <input
                                    type="number"
                                    name="reorder_level"
                                    value={formData.reorder_level}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="0"
                                    min="0"
                                    aria-label="Reorder Level"
                                />
                            </div>
                        </div>

                        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label="Cancel"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label={product ? 'Update Product' : 'Add Product'}
                            >
                                {product ? 'Update Product' : 'Add Product'}
                            </button>
                        </div>
                    </form>
                </Modal>
            );
        };

        // Quick Access Manager Modal Component
        const QuickAccessManagerModal = ({ isOpen, onClose, products, quickAccessProducts, onUpdateQuickAccess }) => {
            const [selectedProducts, setSelectedProducts] = useState([]);

            useEffect(() => {
                // Initialize with current quick access products
                setSelectedProducts(quickAccessProducts.map(p => p.id));
            }, [quickAccessProducts, isOpen]);

            const toggleProduct = (productId) => {
                setSelectedProducts(prev => {
                    if (prev.includes(productId)) {
                        return prev.filter(id => id !== productId);
                    } else {
                        return [...prev, productId];
                    }
                });
            };

            const handleSave = () => {
                const updatedQuickAccess = products.filter(product =>
                    selectedProducts.includes(product.id)
                );
                onUpdateQuickAccess(updatedQuickAccess);
                onClose();
            };

            return (
                <Modal
                    isOpen={isOpen}
                    title="Manage Quick Access Products"
                    onClose={onClose}
                    size="large"
                >
                    <div className="max-h-96 overflow-y-auto custom-scrollbar">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {products.map(product => (
                                <div
                                    key={product.id}
                                    onClick={() => toggleProduct(product.id)}
                                    className={`border rounded-lg p-4 cursor-pointer transition-all ${selectedProducts.includes(product.id)
                                        ? 'border-blue-500 bg-blue-50'
                                        : 'border-gray-200 bg-white hover:bg-gray-50'
                                        }`}
                                    role="checkbox"
                                    aria-checked={selectedProducts.includes(product.id)}
                                    tabIndex={0}
                                    onKeyDown={(e) => e.key === 'Enter' && toggleProduct(product.id)}
                                >
                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center">
                                            <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                                                <i className="fas fa-box text-blue-600 text-sm"></i>
                                            </div>
                                            <div>
                                                <h3 className="font-medium text-gray-800">{product.name}</h3>
                                                <p className="text-sm text-gray-500">{product.category}</p>
                                            </div>
                                        </div>
                                        <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${selectedProducts.includes(product.id)
                                            ? 'bg-blue-500 border-blue-500'
                                            : 'border-gray-300'
                                            }`}>
                                            {selectedProducts.includes(product.id) && (
                                                <i className="fas fa-check text-white text-xs"></i>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    <div className="flex justify-between items-center mt-6 pt-4 border-t border-gray-200">
                        <p className="text-sm text-gray-500">
                            {selectedProducts.length} products selected (max 12)
                        </p>
                        <div className="flex space-x-3">
                            <button
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label="Cancel"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleSave}
                                disabled={selectedProducts.length === 0}
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                aria-label="Save quick access products"
                            >
                                Save Changes
                            </button>
                        </div>
                    </div>
                </Modal>
            );
        };

        // Mobile Payment Modal Component
        const MobilePaymentModal = ({ isOpen, onClose, amount, onProcessPayment }) => {
            const [selectedProvider, setSelectedProvider] = useState('');
            const [phoneNumber, setPhoneNumber] = useState('');
            const [transactionId, setTransactionId] = useState('');

            const handleSubmit = (e) => {
                e.preventDefault();
                if (!selectedProvider || !phoneNumber) {
                    alert('Please select a provider and enter phone number');
                    return;
                }
                onProcessPayment(selectedProvider, phoneNumber, transactionId);
                setSelectedProvider('');
                setPhoneNumber('');
                setTransactionId('');
                onClose();
            };

            const providers = [
                { id: 'mpesa', name: 'M-PESA', color: 'bg-green-500', icon: 'fa-mobile-alt' },
                { id: 'airtelmoney', name: 'Airtel Money', color: 'bg-red-500', icon: 'fa-wifi' },
                { id: 'tigopesa', name: 'Tigo Pesa', color: 'bg-yellow-500', icon: 'fa-bolt' }
            ];

            return (
                <Modal isOpen={isOpen} title="Mobile Payment" onClose={onClose}>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Payment Amount</label>
                            <div className="text-2xl font-bold text-gray-800 text-center p-4 bg-gray-50 rounded-lg">
                                {formatCurrency(amount)}
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Select Provider</label>
                            <div className="grid grid-cols-1 gap-3">
                                {providers.map(provider => (
                                    <div
                                        key={provider.id}
                                        onClick={() => setSelectedProvider(provider.id)}
                                        className={`flex items-center p-4 border-2 rounded-lg cursor-pointer transition-all ${selectedProvider === provider.id
                                            ? 'border-blue-500 bg-blue-50'
                                            : 'border-gray-200 bg-white hover:bg-gray-50'
                                            }`}
                                    >
                                        <div className={`w-10 h-10 ${provider.color} rounded-full flex items-center justify-center mr-3`}>
                                            <i className={`fas ${provider.icon} text-white`}></i>
                                        </div>
                                        <span className="font-medium text-gray-800">{provider.name}</span>
                                        {selectedProvider === provider.id && (
                                            <i className="fas fa-check text-blue-500 ml-auto"></i>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                            <input
                                type="tel"
                                value={phoneNumber}
                                onChange={(e) => setPhoneNumber(e.target.value)}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="255 XXX XXX XXX"
                                required
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Transaction ID (Optional)</label>
                            <input
                                type="text"
                                value={transactionId}
                                onChange={(e) => setTransactionId(e.target.value)}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Enter transaction ID"
                            />
                        </div>

                        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                            >
                                Process Payment
                            </button>
                        </div>
                    </form>
                </Modal>
            );
        };

        // Cash Payment Modal Component
        const CashPaymentModal = ({ isOpen, onClose, amount, onProcessPayment }) => {
            const [amountReceived, setAmountReceived] = useState('');
            const [selectedNotes, setSelectedNotes] = useState({
                10000: 0,
                5000: 0,
                2000: 0,
                1000: 0,
                500: 0,
                200: 0,
                100: 0
            });

            const calculateChange = () => {
                const received = parseFloat(amountReceived) || 0;
                const change = received - amount;
                return change >= 0 ? change : 0;
            };

            const calculateTotalFromNotes = () => {
                return Object.entries(selectedNotes).reduce((total, [denomination, count]) => {
                    return total + (parseInt(denomination) * count);
                }, 0);
            };

            const handleNoteChange = (denomination, count) => {
                setSelectedNotes(prev => ({
                    ...prev,
                    [denomination]: Math.max(0, count)
                }));
            };

            const handleUseNotesTotal = () => {
                const total = calculateTotalFromNotes();
                setAmountReceived(total.toString());
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                const received = parseFloat(amountReceived);
                if (!received || received < amount) {
                    alert('Amount received must be greater than or equal to the total amount');
                    return;
                }
                onProcessPayment('cash', null, null, amountReceived, selectedNotes);
                setAmountReceived('');
                setSelectedNotes({
                    10000: 0, 5000: 0, 2000: 0, 1000: 0, 500: 0, 200: 0, 100: 0
                });
                onClose();
            };

            const change = calculateChange();
            const notesTotal = calculateTotalFromNotes();

            return (
                <Modal isOpen={isOpen} title="Cash Payment" onClose={onClose}>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Total Amount</label>
                                <div className="text-xl font-bold text-gray-800 p-3 bg-gray-50 rounded-lg text-center">
                                    {formatCurrency(amount)}
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Change</label>
                                <div className={`text-xl font-bold p-3 rounded-lg text-center ${change > 0 ? 'bg-green-100 text-green-800' : 'bg-gray-50 text-gray-800'
                                    }`}>
                                    {formatCurrency(change)}
                                </div>
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Amount Received</label>
                            <input
                                type="number"
                                value={amountReceived}
                                onChange={(e) => setAmountReceived(e.target.value)}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Enter amount received"
                                required
                            />
                        </div>

                        <div className="border-t pt-4">
                            <div className="flex justify-between items-center mb-3">
                                <label className="block text-sm font-medium text-gray-700">Count Notes</label>
                                <button
                                    type="button"
                                    onClick={handleUseNotesTotal}
                                    className="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                                >
                                    Use Notes Total: {formatCurrency(notesTotal)}
                                </button>
                            </div>
                            <div className="grid grid-cols-2 gap-3">
                                {Object.entries(selectedNotes).map(([denomination, count]) => (
                                    <div key={denomination} className="flex items-center justify-between p-2 border rounded">
                                        <span className="text-sm font-medium">{formatCurrency(parseInt(denomination))}</span>
                                        <div className="flex items-center space-x-2">
                                            <button
                                                type="button"
                                                onClick={() => handleNoteChange(denomination, count - 1)}
                                                className="w-6 h-6 bg-gray-200 rounded flex items-center justify-center"
                                            >
                                                -
                                            </button>
                                            <span className="w-8 text-center">{count}</span>
                                            <button
                                                type="button"
                                                onClick={() => handleNoteChange(denomination, count + 1)}
                                                className="w-6 h-6 bg-gray-200 rounded flex items-center justify-center"
                                            >
                                                +
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                            >
                                Process Payment
                            </button>
                        </div>
                    </form>
                </Modal>
            );
        };

        // System Settings Modal Component
        const SystemSettingsModal = ({ isOpen, onClose, settings, onSave }) => {
            const [formData, setFormData] = useState({
                supermarketName: '',
                branchLocation: '',
                phoneNumber: '',
                slogan: '',
                receiptFooter: '',
                logo: null,
                theme: 'blue',
                wallpaper: null,
                wallpaperOpacity: 10
            });

            const [activeTab, setActiveTab] = useState('general');

            useEffect(() => {
                if (settings) {
                    setFormData({
                        supermarketName: settings.supermarketName || '',
                        branchLocation: settings.branchLocation || '',
                        phoneNumber: settings.phoneNumber || '',
                        slogan: settings.slogan || '',
                        receiptFooter: settings.receiptFooter || '',
                        logo: settings.logo || null,
                        theme: settings.theme || 'blue',
                        wallpaper: settings.wallpaper || null,
                        wallpaperOpacity: settings.wallpaperOpacity || 10
                    });
                }
            }, [settings, isOpen]);

            const handleChange = (e) => {
                const { name, value } = e.target;
                setFormData(prev => ({
                    ...prev,
                    [name]: value
                }));
            };

            const handleFileUpload = (e, type) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        setFormData(prev => ({
                            ...prev,
                            [type]: event.target.result
                        }));
                    };
                    reader.readAsDataURL(file);
                }
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                onSave({
                    ...formData,
                    receiptSettings: {
                        showLogo: true,
                        showSlogan: false,
                        showPhone: false,
                        showAddress: false,
                        showThankYou: true,
                        fontSize: '12px',
                        printCustomerCopy: true,
                        printMerchantCopy: false
                    }
                });
            };

            // Receipt Preview Component with logo as header
            const ReceiptPreview = () => {
                return (
                    <div className="receipt-preview" style={{ fontSize: '12px' }}>
                        {/* Logo as header - always shown */}
                        {formData.logo && (
                            <div className="text-center mb-2">
                                <img src={formData.logo} alt="Logo" className="h-12 mx-auto" />
                            </div>
                        )}
                        <div className="text-center font-bold mb-1">{formData.supermarketName || 'SUPERMARKET NAME'}</div>
                        <div className="border-b border-dashed border-gray-400 mb-2"></div>
                        <div className="text-sm mb-1">Date: {formatDate(new Date())}</div>
                        <div className="text-sm mb-1">Time: {formatTime(new Date())}</div>
                        <div className="text-sm mb-1">Cashier: Demo User</div>
                        <div className="text-sm mb-2">Receipt #: DEMO12345</div>
                        <div className="border-b border-dashed border-gray-400 mb-2"></div>

                        <table className="w-full text-sm mb-2">
                            <thead>
                                <tr>
                                    <th className="text-left">Item</th>
                                    <th className="text-right">Qty</th>
                                    <th className="text-right">Price</th>
                                    <th className="text-right">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Sample Product 1</td>
                                    <td className="text-right">2</td>
                                    <td className="text-right">2,500</td>
                                    <td className="text-right">5,000</td>
                                </tr>
                                <tr>
                                    <td>Sample Product 2</td>
                                    <td className="text-right">1</td>
                                    <td className="text-right">3,200</td>
                                    <td className="text-right">3,200</td>
                                </tr>
                            </tbody>
                        </table>

                        <div className="border-b border-dashed border-gray-400 mb-2"></div>
                        <div className="text-right font-bold mb-1">TOTAL: TZS 8,200</div>
                        <div className="text-right text-sm mb-2">Payment: CASH</div>
                        <div className="border-b border-dashed border-gray-400 mb-2"></div>
                        <div className="text-center text-sm">{formData.receiptFooter || 'Thank you for shopping with us!'}</div>
                    </div>
                );
            };

            return (
                <Modal
                    isOpen={isOpen}
                    title="System Settings"
                    onClose={onClose}
                    size="large"
                >
                    <div className="flex border-b border-gray-200 mb-6">
                        <button
                            onClick={() => setActiveTab('general')}
                            className={`px-4 py-2 font-medium ${activeTab === 'general' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}
                            aria-label="General tab"
                        >
                            General
                        </button>
                        <button
                            onClick={() => setActiveTab('receipt')}
                            className={`px-4 py-2 font-medium ${activeTab === 'receipt' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}
                            aria-label="Receipt Settings tab"
                        >
                            Receipt Settings
                        </button>
                        <button
                            onClick={() => setActiveTab('appearance')}
                            className={`px-4 py-2 font-medium ${activeTab === 'appearance' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}
                            aria-label="Appearance tab"
                        >
                            Appearance
                        </button>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-6">
                        {activeTab === 'general' && (
                            <>
                                {/* Logo Upload */}
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Supermarket Logo</label>
                                    <div className="flex items-center space-x-4">
                                        <div className="w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center overflow-hidden">
                                            {formData.logo ? (
                                                <img src={formData.logo} alt="Logo preview" className="w-full h-full object-contain" />
                                            ) : (
                                                <i className="fas fa-store text-gray-400 text-2xl"></i>
                                            )}
                                        </div>
                                        <div>
                                            <input
                                                type="file"
                                                accept="image/*"
                                                onChange={(e) => handleFileUpload(e, 'logo')}
                                                className="hidden"
                                                id="logo-upload"
                                                aria-label="Upload logo"
                                            />
                                            <label
                                                htmlFor="logo-upload"
                                                className="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                                            >
                                                Upload Logo
                                            </label>
                                            <p className="text-xs text-gray-500 mt-1">Recommended: 200x200px PNG</p>
                                        </div>
                                    </div>
                                </div>

                                {/* Supermarket Information */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Supermarket Name</label>
                                        <input
                                            type="text"
                                            name="supermarketName"
                                            value={formData.supermarketName}
                                            onChange={handleChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            placeholder="Enter supermarket name"
                                            aria-label="Supermarket Name"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Branch Location</label>
                                        <input
                                            type="text"
                                            name="branchLocation"
                                            value={formData.branchLocation}
                                            onChange={handleChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            placeholder="Enter branch location"
                                            aria-label="Branch Location"
                                        />
                                    </div>
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                                        <input
                                            type="text"
                                            name="phoneNumber"
                                            value={formData.phoneNumber}
                                            onChange={handleChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            placeholder="Enter phone number"
                                            aria-label="Phone Number"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Slogan</label>
                                        <input
                                            type="text"
                                            name="slogan"
                                            value={formData.slogan}
                                            onChange={handleChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            placeholder="Enter slogan"
                                            aria-label="Slogan"
                                        />
                                    </div>
                                </div>

                                {/* Receipt Footer */}
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Receipt Footer Message</label>
                                    <textarea
                                        name="receiptFooter"
                                        value={formData.receiptFooter}
                                        onChange={handleChange}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        placeholder="Enter receipt footer message"
                                        rows="3"
                                        aria-label="Receipt Footer Message"
                                    ></textarea>
                                </div>
                            </>
                        )}

                        {activeTab === 'receipt' && (
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div className="space-y-4">
                                    <h3 className="text-lg font-medium text-gray-800">Receipt Information</h3>
                                    <p className="text-sm text-gray-600">
                                        The logo will always be displayed as the header of the receipt.
                                        Other receipt settings have been simplified for better user experience.
                                    </p>

                                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                        <div className="flex items-center">
                                            <i className="fas fa-info-circle text-blue-500 mr-2"></i>
                                            <p className="text-sm text-blue-700">
                                                <strong>Note:</strong> Logo is required and will be automatically placed as the receipt header.
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <h3 className="text-lg font-medium text-gray-800 mb-4">Receipt Preview</h3>
                                    <ReceiptPreview />
                                </div>
                            </div>
                        )}

                        {activeTab === 'appearance' && (
                            <div className="space-y-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Theme Color</label>
                                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                        <div
                                            onClick={() => setFormData(prev => ({ ...prev, theme: 'blue' }))}
                                            className={`border-2 rounded-lg p-4 cursor-pointer flex flex-col items-center ${formData.theme === 'blue' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}
                                        >
                                            <div className="w-12 h-12 bg-blue-500 rounded-lg mb-2"></div>
                                            <span className="text-sm font-medium">Blue</span>
                                        </div>
                                        <div
                                            onClick={() => setFormData(prev => ({ ...prev, theme: 'green' }))}
                                            className={`border-2 rounded-lg p-4 cursor-pointer flex flex-col items-center ${formData.theme === 'green' ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}
                                        >
                                            <div className="w-12 h-12 bg-green-500 rounded-lg mb-2"></div>
                                            <span className="text-sm font-medium">Green</span>
                                        </div>
                                        <div
                                            onClick={() => setFormData(prev => ({ ...prev, theme: 'purple' }))}
                                            className={`border-2 rounded-lg p-4 cursor-pointer flex flex-col items-center ${formData.theme === 'purple' ? 'border-purple-500 bg-purple-50' : 'border-gray-200'}`}
                                        >
                                            <div className="w-12 h-12 bg-purple-500 rounded-lg mb-2"></div>
                                            <span className="text-sm font-medium">Purple</span>
                                        </div>
                                        <div
                                            onClick={() => setFormData(prev => ({ ...prev, theme: 'orange' }))}
                                            className={`border-2 rounded-lg p-4 cursor-pointer flex flex-col items-center ${formData.theme === 'orange' ? 'border-orange-500 bg-orange-50' : 'border-gray-200'}`}
                                        >
                                            <div className="w-12 h-12 bg-orange-500 rounded-lg mb-2"></div>
                                            <span className="text-sm font-medium">Orange</span>
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Background Wallpaper</label>
                                    <div className="flex items-center space-x-4">
                                        <div className="w-32 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center overflow-hidden">
                                            {formData.wallpaper ? (
                                                <img src={formData.wallpaper} alt="Wallpaper preview" className="w-full h-full object-cover" />
                                            ) : (
                                                <i className="fas fa-image text-gray-400 text-xl"></i>
                                            )}
                                        </div>
                                        <div>
                                            <input
                                                type="file"
                                                accept="image/*"
                                                onChange={(e) => handleFileUpload(e, 'wallpaper')}
                                                className="hidden"
                                                id="wallpaper-upload"
                                                aria-label="Upload wallpaper"
                                            />
                                            <label
                                                htmlFor="wallpaper-upload"
                                                className="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                                            >
                                                Upload Wallpaper
                                            </label>
                                            {formData.wallpaper && (
                                                <button
                                                    type="button"
                                                    onClick={() => setFormData(prev => ({ ...prev, wallpaper: null }))}
                                                    className="block mt-2 text-red-600 text-sm"
                                                >
                                                    Remove Wallpaper
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                </div>

                                {formData.wallpaper && (
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Wallpaper Opacity</label>
                                        <input
                                            type="range"
                                            name="wallpaperOpacity"
                                            value={formData.wallpaperOpacity}
                                            onChange={handleChange}
                                            min="5"
                                            max="30"
                                            step="5"
                                            className="w-full"
                                            aria-label="Wallpaper opacity"
                                        />
                                        <div className="flex justify-between text-xs text-gray-500">
                                            <span>Subtle (5%)</span>
                                            <span>Current: {formData.wallpaperOpacity}%</span>
                                            <span>Visible (30%)</span>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}

                        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                            <button
                                type="button"
                                onClick={onClose}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label="Cancel"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                aria-label="Save Settings"
                            >
                                Save Settings
                            </button>
                        </div>
                    </form>
                </Modal>
            );
        };

        // Receipt Component
        const ReceiptModal = ({ isOpen, onClose, sale, settings }) => {
            if (!isOpen || !sale) return null;

            const printReceipt = () => {
                const receiptWindow = window.open('', '_blank');
                const receiptHTML = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Receipt</title>
                    <style>
                        body { 
                            font-family: 'Courier New', monospace; 
                            font-size: ${settings?.receiptSettings?.fontSize || '12px'}; 
                            margin: 0; 
                            padding: 20px; 
                            background: white; 
                            color: black; 
                        }
                        .receipt { max-width: 300px; margin: 0 auto; }
                        .center { text-align: center; }
                        .line { border-bottom: 1px dashed #000; margin: 10px 0; }
                        table { width: 100%; border-collapse: collapse; }
                        th, td { text-align: left; padding: 2px 0; }
                        .right { text-align: right; }
                        .bold { font-weight: bold; }
                    </style>
                </head>
                <body>
                    <div class="receipt">
                        ${settings?.receiptSettings?.showLogo && settings?.logo ? `
                            <div class="center">
                                <img src="${settings.logo}" alt="Logo" style="height: 40px; margin-bottom: 5px;">
                            </div>
                        ` : ''}
                        <div class="center bold">${settings?.supermarketName || 'BITLYNX POS PRO'}</div>
                        <div class="line"></div>
                        <div>Date: ${formatDate(sale.date)}</div>
                        <div>Time: ${formatTime(sale.date)}</div>
                        <div>Cashier: ${sale.user_name}</div>
                        <div>Receipt #: ${sale.id.slice(-8).toUpperCase()}</div>
                        <div class="line"></div>
                        <table>
                            <thead>
                                <tr>
                                    <th>Item</th>
                                    <th class="right">Qty</th>
                                    <th class="right">Price</th>
                                    <th class="right">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${sale.items.map(item => `
                                    <tr>
                                        <td>${item.name}</td>
                                        <td class="right">${item.quantity}</td>
                                        <td class="right">${item.unit_price.toLocaleString()}</td>
                                        <td class="right">${(item.unit_price * item.quantity).toLocaleString()}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                        <div class="line"></div>
                        <div class="bold">TOTAL: TZS ${sale.total.toLocaleString()}</div>
                        <div>Payment: ${sale.payment_method.toUpperCase()}</div>
                        ${sale.payment_details ? `
                            <div>Amount Received: TZS ${sale.payment_details.amountReceived?.toLocaleString() || ''}</div>
                            <div>Change: TZS ${sale.payment_details.change?.toLocaleString() || ''}</div>
                        ` : ''}
                        <div class="line"></div>
                        ${settings?.receiptSettings?.showThankYou ? `<div class="center">${settings?.receiptFooter || 'Thank you for shopping with us!'}</div>` : ''}
                    </div>
                </body>
                </html>
            `;

                receiptWindow.document.write(receiptHTML);
                receiptWindow.document.close();

                // Print customer copy if enabled
                if (settings?.receiptSettings?.printCustomerCopy) {
                    receiptWindow.print();
                }

                // If merchant copy is enabled, wait and print again
                if (settings?.receiptSettings?.printMerchantCopy) {
                    setTimeout(() => {
                        receiptWindow.print();
                        setTimeout(() => receiptWindow.close(), 1000);
                    }, 1000);
                } else {
                    setTimeout(() => receiptWindow.close(), 1000);
                }
            };

            return (
                <Modal
                    isOpen={isOpen}
                    title="Receipt"
                    onClose={onClose}
                >
                    <div className="receipt-print" style={{ fontSize: settings?.receiptSettings?.fontSize }}>
                        {settings?.receiptSettings?.showLogo && settings?.logo && (
                            <div className="text-center mb-2">
                                <img src={settings.logo} alt="Logo" className="h-12 mx-auto" />
                            </div>
                        )}
                        <div className="text-center font-bold text-lg mb-2">{settings?.supermarketName || 'BITLYNX POS PRO'}</div>
                        <div className="border-b border-dashed border-gray-400 mb-2"></div>
                        <div className="text-sm mb-1">Date: {formatDate(sale.date)}</div>
                        <div className="text-sm mb-1">Time: {formatTime(sale.date)}</div>
                        <div className="text-sm mb-1">Cashier: {sale.user_name}</div>
                        <div className="text-sm mb-2">Receipt #: {sale.id.slice(-8).toUpperCase()}</div>
                        <div className="border-b border-dashed border-gray-400 mb-2"></div>

                        <table className="w-full text-sm mb-2">
                            <thead>
                                <tr>
                                    <th className="text-left">Item</th>
                                    <th className="text-right">Qty</th>
                                    <th className="text-right">Price</th>
                                    <th className="text-right">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                {sale.items.map(item => (
                                    <tr key={item.id}>
                                        <td>{item.name}</td>
                                        <td className="text-right">{item.quantity}</td>
                                        <td className="text-right">{item.unit_price.toLocaleString()}</td>
                                        <td className="text-right">{(item.unit_price * item.quantity).toLocaleString()}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>

                        <div className="border-b border-dashed border-gray-400 mb-2"></div>
                        <div className="text-right font-bold mb-1">TOTAL: TZS {sale.total.toLocaleString()}</div>
                        <div className="text-right text-sm mb-2">Payment: {sale.payment_method.toUpperCase()}</div>
                        {sale.payment_details && (
                            <>
                                <div className="text-right text-sm mb-1">Amount Received: TZS {sale.payment_details.amountReceived?.toLocaleString() || ''}</div>
                                <div className="text-right text-sm mb-2">Change: TZS {sale.payment_details.change?.toLocaleString() || ''}</div>
                            </>
                        )}
                        <div className="border-b border-dashed border-gray-400 mb-2"></div>
                        {settings?.receiptSettings?.showThankYou && (
                            <div className="text-center text-sm">{settings?.receiptFooter || 'Thank you for shopping with us!'}</div>
                        )}
                    </div>

                    <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 mt-4">
                        <button
                            onClick={printReceipt}
                            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                            aria-label="Print Receipt"
                        >
                            Print Receipt
                        </button>
                        <button
                            onClick={onClose}
                            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                            aria-label="Close"
                        >
                            Close
                        </button>
                    </div>
                </Modal>
            );
        };

        // ============================================================================
        // POS APPLICATION COMPONENT
        // ============================================================================

        const POSApp = ({ currentUser, onLogout, settings }) => {
            const [products, setProducts] = useState([]);
            const [cart, setCart] = useState([]);
            const [searchTerm, setSearchTerm] = useState('');
            const [showMobilePayment, setShowMobilePayment] = useState(false);
            const [showCashPayment, setShowCashPayment] = useState(false);
            const [showReceipt, setShowReceipt] = useState(false);
            const [currentSale, setCurrentSale] = useState(null);
            const [toasts, setToasts] = useState([]);
            const [showQuickAccessManager, setShowQuickAccessManager] = useState(false);
            const [quickAccessProducts, setQuickAccessProducts] = useState([]);
            const [loginTime] = useState(localStorage.getItem('userLoginTime') || new Date().toISOString());

            // Initialize data
            useEffect(() => {
                const savedProducts = safeParseJSON('products', []);
                const savedQuickAccess = safeParseJSON('quickAccessProducts', []);

                setProducts(savedProducts);
                setQuickAccessProducts(savedQuickAccess);

                // Create sample products if none exist
                if (savedProducts.length === 0) {
                    const sampleProducts = [
                        {
                            id: generateId(),
                            barcode: '1001',
                            name: 'Bread',
                            category: 'Bakery',
                            buy_price: 1500,
                            sell_price: 2500,
                            available_stock: 25,
                            items_sold: 0,
                            reorder_level: 10,
                            expiration_date: null
                        },
                        {
                            id: generateId(),
                            barcode: '1002',
                            name: 'Milk 1L',
                            category: 'Dairy',
                            buy_price: 2000,
                            sell_price: 3200,
                            available_stock: 15,
                            items_sold: 0,
                            reorder_level: 5,
                            expiration_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                        },
                        {
                            id: generateId(),
                            barcode: '1003',
                            name: 'Rice 5kg',
                            category: 'Grains',
                            buy_price: 12000,
                            sell_price: 15000,
                            available_stock: 32,
                            items_sold: 0,
                            reorder_level: 15,
                            expiration_date: null
                        }
                    ];
                    setProducts(sampleProducts);
                    safeSetJSON('products', sampleProducts);

                    // Set first few products as quick access
                    setQuickAccessProducts(sampleProducts.slice(0, 3));
                    safeSetJSON('quickAccessProducts', sampleProducts.slice(0, 3));
                }
            }, []);

            // Toast system
            const showToast = (message, type = 'success') => {
                const id = generateId();
                const toast = { id, message, type };
                setToasts(prev => [...prev, toast]);

                setTimeout(() => {
                    setToasts(prev => prev.filter(t => t.id !== id));
                }, 3000);
            };

            // Cart functions
            const addToCart = (product) => {
                const existingItem = cart.find(item => item.id === product.id);

                if (existingItem) {
                    setCart(cart.map(item =>
                        item.id === product.id
                            ? { ...item, quantity: item.quantity + 1 }
                            : item
                    ));
                } else {
                    setCart([...cart, {
                        ...product,
                        quantity: 1
                    }]);
                }
                showToast(`${product.name} added to cart`);
            };

            const updateQuantity = (productId, newQuantity) => {
                if (newQuantity < 1) {
                    removeFromCart(productId);
                    return;
                }

                setCart(cart.map(item =>
                    item.id === productId
                        ? { ...item, quantity: newQuantity }
                        : item
                ));
            };

            const removeFromCart = (productId) => {
                setCart(cart.filter(item => item.id !== productId));
            };

            const clearCart = () => {
                setCart([]);
            };

            // Cart calculations
            const cartItems = cart.reduce((total, item) => total + item.quantity, 0);
            const cartSubtotal = cart.reduce((total, item) => total + (item.sell_price * item.quantity), 0);
            const cartTax = 0; // No tax for simplicity
            const cartTotal = cartSubtotal + cartTax;

            // Product search and categorization
            const filteredProducts = useMemo(() => {
                if (!searchTerm) return products;

                return products.filter(product =>
                    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    product.barcode.includes(searchTerm)
                );
            }, [products, searchTerm]);

            const productsByCategory = useMemo(() => {
                const categories = {};
                filteredProducts.forEach(product => {
                    if (!categories[product.category]) {
                        categories[product.category] = [];
                    }
                    categories[product.category].push(product);
                });
                return categories;
            }, [filteredProducts]);

            // Category icons and colors
            const getCategoryIcon = (category) => {
                const icons = {
                    'Bakery': 'fa-bread-slice',
                    'Dairy': 'fa-cheese',
                    'Grains': 'fa-wheat-awn',
                    'Cooking': 'fa-utensils',
                    'Groceries': 'fa-shopping-basket',
                    'Beverages': 'fa-wine-bottle',
                    'Personal Care': 'fa-soap',
                    'Fruits': 'fa-apple-alt',
                    'Vegetables': 'fa-carrot',
                    'Other': 'fa-box'
                };
                return icons[category] || 'fa-box';
            };

            const getCategoryColor = (category) => {
                const colors = {
                    'Bakery': 'bg-yellow-500',
                    'Dairy': 'bg-blue-500',
                    'Grains': 'bg-amber-500',
                    'Cooking': 'bg-red-500',
                    'Groceries': 'bg-green-500',
                    'Beverages': 'bg-indigo-500',
                    'Personal Care': 'bg-purple-500',
                    'Fruits': 'bg-red-400',
                    'Vegetables': 'bg-green-400',
                    'Other': 'bg-gray-500'
                };
                return colors[category] || 'bg-gray-500';
            };

            // Payment processing
            const processSale = (paymentMethod, phoneNumber = null, transactionId = null, amountReceived = null, notes = null) => {
                if (cart.length === 0) {
                    showToast('Cart is empty', 'error');
                    return;
                }

                const sale = {
                    id: generateId(),
                    date: new Date().toISOString(),
                    user_id: currentUser.id,
                    user_name: currentUser.display_name,
                    items: cart.map(item => ({
                        id: item.id,
                        name: item.name,
                        quantity: item.quantity,
                        unit_price: item.sell_price,
                        total: item.sell_price * item.quantity,
                        profit: calculateProfit(item.buy_price, item.sell_price) * item.quantity
                    })),
                    subtotal: cartSubtotal,
                    tax: cartTax,
                    total: cartTotal,
                    total_profit: cart.reduce((total, item) =>
                        total + (calculateProfit(item.buy_price, item.sell_price) * item.quantity), 0),
                    payment_method: paymentMethod,
                    payment_details: {
                        phoneNumber,
                        transactionId,
                        amountReceived: amountReceived ? parseFloat(amountReceived) : null,
                        change: amountReceived ? parseFloat(amountReceived) - cartTotal : null,
                        notes
                    }
                };

                // Save sale
                const savedSales = safeParseJSON('sales', []);
                const updatedSales = [...savedSales, sale];
                safeSetJSON('sales', updatedSales);

                // Update product stock
                const updatedProducts = products.map(product => {
                    const cartItem = cart.find(item => item.id === product.id);
                    if (cartItem) {
                        return {
                            ...product,
                            available_stock: product.available_stock - cartItem.quantity,
                            items_sold: (product.items_sold || 0) + cartItem.quantity
                        };
                    }
                    return product;
                });
                setProducts(updatedProducts);
                safeSetJSON('products', updatedProducts);

                // Show receipt and clear cart
                setCurrentSale(sale);
                setShowReceipt(true);
                clearCart();

                showToast('Sale completed successfully');
            };

            // Quick access management
            const updateQuickAccessProducts = (newQuickAccess) => {
                setQuickAccessProducts(newQuickAccess);
                safeSetJSON('quickAccessProducts', newQuickAccess);
                showToast('Quick access products updated');
            };

            // Wallpaper component
            const Wallpaper = () => {
                if (!settings?.wallpaper) return null;

                return (
                    <div
                        className="pos-wallpaper"
                        style={{
                            backgroundImage: `url(${settings.wallpaper})`,
                            opacity: (settings.wallpaperOpacity || 10) / 100
                        }}
                    />
                );
            };

            // Header component
            const Header = () => {
                return (
                    <div className="pos-header-transparent shadow-sm border-b border-gray-200">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="flex justify-between items-center py-4">
                                <div className="flex items-center">
                                    <div className="flex-shrink-0">
                                        <div className="flex items-center">
                                            {settings?.logo ? (
                                                <img src={settings.logo} alt={`${settings.supermarketName || 'Bitlynx POS Pro'} logo`} className="h-10 w-10 mr-3 object-contain" />
                                            ) : (
                                                <i className="fas fa-shopping-cart text-blue-600 text-3xl mr-3" aria-hidden="true"></i>
                                            )}
                                            <div>
                                                <h1 className="text-2xl font-bold text-gray-800">
                                                    {settings?.supermarketName || 'Bitlynx POS Pro'}
                                                </h1>
                                                <p className="text-xs text-gray-500">
                                                    Logged in: {formatDateTime(loginTime)}
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div className="ml-4 flex items-center md:ml-6">
                                    <div className="flex items-center bg-gray-100 px-4 py-2 rounded-lg">
                                        <div className="text-sm">
                                            <div className="font-medium text-gray-800 flex items-center">
                                                <i className="fas fa-user text-blue-600 mr-2" aria-hidden="true"></i>
                                                {currentUser.display_name}
                                            </div>
                                            <div className="text-gray-600 text-xs capitalize">{currentUser.role}</div>
                                        </div>
                                    </div>
                                    <button
                                        onClick={onLogout}
                                        className="btn-primary px-4 py-2 rounded-lg flex items-center ml-4"
                                        aria-label="Logout"
                                    >
                                        <i className="fas fa-sign-out-alt mr-2"></i>
                                        Logout
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            };

            // Main POS Component with transparent background
            const POSView = () => {
                return (
                    <div className="pos-with-wallpaper">
                        <Wallpaper />
                        <div className="pos-content-transparent flex flex-col h-screen">
                            <Header />

                            <div className="flex flex-1 overflow-hidden">
                                {/* Products Section with transparent background */}
                                <div className="flex-1 p-6 overflow-auto custom-scrollbar pos-content-transparent">
                                    {/* Search Bar */}
                                    <div className="mb-6">
                                        <div className="relative">
                                            <input
                                                type="text"
                                                placeholder="Search by product name or barcode..."
                                                value={searchTerm}
                                                onChange={(e) => setSearchTerm(e.target.value)}
                                                className="w-full px-6 py-4 bg-white border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg font-medium"
                                                autoFocus
                                                aria-label="Search products by name or barcode"
                                            />
                                            <i className="fas fa-search absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400" aria-hidden="true"></i>
                                        </div>
                                    </div>

                                    {/* Quick Access Products with glass effect */}
                                    <div className="mb-8">
                                        <div className="flex justify-between items-center mb-4">
                                            <h2 className="text-xl font-bold text-gray-800 flex items-center">
                                                <i className="fas fa-bolt text-yellow-500 mr-2" aria-hidden="true"></i>
                                                Quick Access
                                            </h2>
                                            <div className="flex space-x-2">
                                                <button
                                                    onClick={() => setShowQuickAccessManager(true)}
                                                    className="bg-blue-600 text-white px-3 py-1 rounded-lg text-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                    aria-label="Manage quick access products"
                                                >
                                                    <i className="fas fa-cog mr-1"></i>
                                                    Manage
                                                </button>
                                            </div>
                                        </div>
                                        <div className="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                                            {quickAccessProducts.map(product => (
                                                <div
                                                    key={product.id}
                                                    onClick={() => addToCart(product)}
                                                    className="quick-access-transparent border border-gray-200 rounded-xl shadow-sm p-4 cursor-pointer flex flex-col items-center justify-center min-h-[120px] hover:shadow-md transition-all"
                                                    role="button"
                                                    tabIndex={0}
                                                    onKeyDown={(e) => e.key === 'Enter' && addToCart(product)}
                                                    aria-label={`Add ${product.name} to cart`}
                                                >
                                                    <div className={`w-12 h-12 rounded-full ${getCategoryColor(product.category)} flex items-center justify-center mb-2`}>
                                                        <i className={`fas ${getCategoryIcon(product.category)} text-white text-lg`}></i>
                                                    </div>
                                                    <h3 className="font-bold text-gray-800 text-sm text-center truncate w-full mb-1">{product.name}</h3>
                                                    <p className="text-blue-600 font-bold text-sm">{formatCurrency(product.sell_price)}</p>
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    {/* All Products with glass effect */}
                                    <div>
                                        <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
                                            <i className="fas fa-boxes text-blue-500 mr-2" aria-hidden="true"></i>
                                            All Products
                                        </h2>

                                        {Object.keys(productsByCategory).map(category => (
                                            <div key={category} className="category-section">
                                                <div className="category-header">
                                                    <div className={`category-icon ${getCategoryColor(category)}`}>
                                                        <i className={`fas ${getCategoryIcon(category)} text-white`}></i>
                                                    </div>
                                                    <h3 className="text-lg font-bold text-gray-800">{category}</h3>
                                                </div>
                                                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                                                    {productsByCategory[category].map(product => (
                                                        <div
                                                            key={product.id}
                                                            onClick={() => addToCart(product)}
                                                            className="product-card-transparent border border-gray-200 rounded-xl shadow-sm p-5 cursor-pointer flex flex-col h-full hover:shadow-md transition-shadow"
                                                            role="button"
                                                            tabIndex={0}
                                                            onKeyDown={(e) => e.key === 'Enter' && addToCart(product)}
                                                            aria-label={`Add ${product.name} to cart`}
                                                        >
                                                            <div className="flex items-center justify-between mb-3">
                                                                <h3 className="font-bold text-gray-800 text-lg truncate">{product.name}</h3>
                                                                <div className={`w-10 h-10 rounded-full ${getCategoryColor(product.category)} flex items-center justify-center`}>
                                                                    <i className={`fas ${getCategoryIcon(product.category)} text-white`}></i>
                                                                </div>
                                                            </div>
                                                            <p className="text-gray-600 mb-3 text-sm flex-grow">{product.category}</p>
                                                            <div className="mt-auto">
                                                                <p className="text-2xl font-bold text-blue-600 mb-2">{formatCurrency(product.sell_price)}</p>
                                                                <div className="flex justify-between items-center text-xs">
                                                                    <span className="text-gray-500">#{product.barcode}</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                {/* Cart Section with glass effect */}
                                <div className="w-96 pos-cart-transparent border-l border-gray-200 p-6 overflow-auto custom-scrollbar">
                                    <div className="flex items-center justify-between mb-6">
                                        <h2 className="text-2xl font-bold text-gray-800 flex items-center">
                                            <i className="fas fa-shopping-cart text-blue-600 mr-2" aria-hidden="true"></i>
                                            Cart
                                        </h2>
                                        <span className="bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium" aria-label={`${cartItems} items in cart`}>
                                            {cartItems} items
                                        </span>
                                    </div>

                                    {cart.length === 0 ? (
                                        <div className="text-center py-12">
                                            <i className="fas fa-shopping-cart text-gray-300 text-6xl mb-4" aria-hidden="true"></i>
                                            <p className="text-gray-500 text-lg">Your cart is empty</p>
                                            <p className="text-gray-400 text-sm mt-2">Add products to get started</p>
                                        </div>
                                    ) : (
                                        <>
                                            <div className="space-y-4 mb-6">
                                                {cart.map(item => (
                                                    <div key={item.id} className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
                                                        <div className="flex justify-between items-start mb-2">
                                                            <div>
                                                                <h3 className="font-bold text-gray-800">{item.name}</h3>
                                                                <p className="text-gray-500 text-sm">{formatCurrency(item.sell_price)} each</p>
                                                            </div>
                                                            <button
                                                                onClick={() => removeFromCart(item.id)}
                                                                className="text-red-500 hover:text-red-700"
                                                                aria-label={`Remove ${item.name} from cart`}
                                                            >
                                                                <i className="fas fa-times"></i>
                                                            </button>
                                                        </div>
                                                        <div className="flex items-center justify-between">
                                                            <div className="flex items-center space-x-2">
                                                                <button
                                                                    onClick={() => updateQuantity(item.id, item.quantity - 1)}
                                                                    className="w-8 h-8 bg-gray-200 rounded flex items-center justify-center"
                                                                    aria-label={`Decrease quantity of ${item.name}`}
                                                                >
                                                                    -
                                                                </button>
                                                                <span className="font-medium w-8 text-center">{item.quantity}</span>
                                                                <button
                                                                    onClick={() => updateQuantity(item.id, item.quantity + 1)}
                                                                    className="w-8 h-8 bg-gray-200 rounded flex items-center justify-center"
                                                                    aria-label={`Increase quantity of ${item.name}`}
                                                                >
                                                                    +
                                                                </button>
                                                            </div>
                                                            <span className="font-bold text-gray-800">
                                                                {formatCurrency(item.sell_price * item.quantity)}
                                                            </span>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>

                                            <div className="space-y-3 mb-6">
                                                <div className="flex justify-between text-lg">
                                                    <span className="text-gray-600">Subtotal:</span>
                                                    <span className="font-bold">{formatCurrency(cartSubtotal)}</span>
                                                </div>
                                                <div className="flex justify-between text-lg">
                                                    <span className="text-gray-600">Tax:</span>
                                                    <span className="font-bold">{formatCurrency(cartTax)}</span>
                                                </div>
                                                <div className="flex justify-between text-xl font-bold border-t border-gray-200 pt-3">
                                                    <span>Total:</span>
                                                    <span>{formatCurrency(cartTotal)}</span>
                                                </div>
                                            </div>

                                            <div className="space-y-3">
                                                <button
                                                    onClick={() => setShowCashPayment(true)}
                                                    className="w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-semibold flex items-center justify-center transition-colors"
                                                    disabled={cart.length === 0}
                                                >
                                                    <i className="fas fa-money-bill-wave mr-2"></i>
                                                    Cash Payment
                                                </button>
                                                <button
                                                    onClick={() => setShowMobilePayment(true)}
                                                    className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-semibold flex items-center justify-center transition-colors"
                                                    disabled={cart.length === 0}
                                                >
                                                    <i className="fas fa-mobile-alt mr-2"></i>
                                                    Mobile Payment
                                                </button>
                                                <button
                                                    onClick={clearCart}
                                                    className="w-full bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-lg font-semibold transition-colors"
                                                    disabled={cart.length === 0}
                                                >
                                                    Clear Cart
                                                </button>
                                            </div>
                                        </>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                );
            };

            // Main render
            return (
                <div className="min-h-screen bg-gray-50">
                    <POSView />

                    {/* Toast Container */}
                    <div className="fixed bottom-4 right-4 space-y-2 z-50" role="status">
                        {toasts.map(toast => (
                            <Toast key={toast.id} message={toast.message} type={toast.type} />
                        ))}
                    </div>

                    {/* Quick Access Manager Modal */}
                    <QuickAccessManagerModal
                        isOpen={showQuickAccessManager}
                        onClose={() => setShowQuickAccessManager(false)}
                        products={products}
                        quickAccessProducts={quickAccessProducts}
                        onUpdateQuickAccess={updateQuickAccessProducts}
                    />

                    {/* Mobile Payment Modal */}
                    <MobilePaymentModal
                        isOpen={showMobilePayment}
                        onClose={() => setShowMobilePayment(false)}
                        amount={cartTotal}
                        onProcessPayment={(provider, phone, transactionId) => processSale(provider, phone, transactionId)}
                    />

                    {/* Cash Payment Modal */}
                    <CashPaymentModal
                        isOpen={showCashPayment}
                        onClose={() => setShowCashPayment(false)}
                        amount={cartTotal}
                        onProcessPayment={(method, phone, transactionId, amountReceived, notes) =>
                            processSale(method, phone, transactionId, amountReceived, notes)
                        }
                    />

                    {/* Receipt Modal */}
                    <ReceiptModal
                        isOpen={showReceipt}
                        onClose={() => setShowReceipt(false)}
                        sale={currentSale}
                        settings={settings}
                    />
                </div>
            );
        };

        // ============================================================================
        // MANAGER APPLICATION COMPONENT WITH ENHANCED DASHBOARD
        // ============================================================================

        const ManagerApp = ({ currentUser, onLogout }) => {
            const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
            const [currentView, setCurrentView] = useState('dashboard');
            const [toasts, setToasts] = useState([]);
            const [users, setUsers] = useState([]);
            const [products, setProducts] = useState([]);
            const [sales, setSales] = useState([]);
            const [lowStockProducts, setLowStockProducts] = useState([]);
            const [expiringProducts, setExpiringProducts] = useState([]);
            const [showUserModal, setShowUserModal] = useState(false);
            const [editingUser, setEditingUser] = useState(null);
            const [showProductModal, setShowProductModal] = useState(false);
            const [editingProduct, setEditingProduct] = useState(null);
            const [showSettingsModal, setShowSettingsModal] = useState(false);
            const [systemSettings, setSystemSettings] = useState({
                supermarketName: 'Bitlynx POS Pro',
                branchLocation: 'Dar es Salaam, Tanzania',
                phoneNumber: '+255 123 456 789',
                slogan: 'Quality Products, Best Prices',
                receiptFooter: 'Thank you for shopping with us! Please come again.',
                theme: 'blue',
                logo: null,
                wallpaper: null,
                wallpaperOpacity: 10,
                receiptSettings: {
                    showLogo: true,
                    showSlogan: false,
                    showPhone: false,
                    showAddress: false,
                    showThankYou: true,
                    fontSize: '12px',
                    printCustomerCopy: true,
                    printMerchantCopy: false
                }
            });

            // Chart instances ref
            const chartInstances = useRef({
                revenue: null,
                category: null,
                payment: null
            });

            // Initialize data with error handling
            useEffect(() => {
                const savedUsers = safeParseJSON('users', []);
                const savedProducts = safeParseJSON('products', []);
                const savedSales = safeParseJSON('sales', []);
                const savedSettings = safeParseJSON('systemSettings');

                setUsers(savedUsers);
                setProducts(savedProducts);
                setSales(savedSales);

                if (savedSettings) {
                    setSystemSettings(savedSettings);
                    applyTheme(savedSettings.theme);
                }

                // Calculate low stock and expiring products
                const lowStock = savedProducts.filter(p => (p.available_stock || 0) <= (p.reorder_level || 0));
                const expiring = savedProducts.filter(p => isExpiringSoon(p.expiration_date));
                setLowStockProducts(lowStock);
                setExpiringProducts(expiring);

                if (savedProducts.length === 0) {
                    createSampleProducts();
                }

                if (savedUsers.length === 0) {
                    createSampleUsers();
                }

                if (savedSales.length === 0) {
                    createSampleSales();
                }
            }, []);

            // Cleanup charts on unmount
            useEffect(() => {
                return () => {
                    // Destroy all chart instances
                    Object.values(chartInstances.current).forEach(chart => {
                        if (chart) {
                            chart.destroy();
                        }
                    });
                };
            }, []);

            // Apply theme to document
            const applyTheme = (theme) => {
                document.body.className = document.body.className.replace(/theme-\w+/g, '');
                document.body.classList.add(`theme-${theme}`);
            };

            // Create sample products with validation
            const createSampleProducts = () => {
                const sampleProducts = [
                    {
                        id: generateId(),
                        barcode: '1001',
                        name: 'Bread',
                        category: 'Bakery',
                        buy_price: 1500,
                        sell_price: 2500,
                        available_stock: 25,
                        items_sold: 0,
                        reorder_level: 10,
                        expiration_date: null
                    },
                    {
                        id: generateId(),
                        barcode: '1002',
                        name: 'Milk 1L',
                        category: 'Dairy',
                        buy_price: 2000,
                        sell_price: 3200,
                        available_stock: 15,
                        items_sold: 0,
                        reorder_level: 5,
                        expiration_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                    },
                    {
                        id: generateId(),
                        barcode: '1003',
                        name: 'Rice 5kg',
                        category: 'Grains',
                        buy_price: 12000,
                        sell_price: 15000,
                        available_stock: 32,
                        items_sold: 0,
                        reorder_level: 15,
                        expiration_date: null
                    },
                    {
                        id: generateId(),
                        barcode: '1013',
                        name: 'Apples',
                        category: 'Fruits',
                        buy_price: 800,
                        sell_price: 1500,
                        available_stock: 30,
                        items_sold: 0,
                        reorder_level: 10,
                        expiration_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                    },
                    {
                        id: generateId(),
                        barcode: '1014',
                        name: 'Tomatoes',
                        category: 'Vegetables',
                        buy_price: 500,
                        sell_price: 1000,
                        available_stock: 40,
                        items_sold: 0,
                        reorder_level: 15,
                        expiration_date: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                    }
                ];

                setProducts(sampleProducts);
                safeSetJSON('products', sampleProducts);

                // Recalculate low stock and expiring
                const lowStock = sampleProducts.filter(p => p.available_stock <= (p.reorder_level || 0));
                const expiring = sampleProducts.filter(p => isExpiringSoon(p.expiration_date));
                setLowStockProducts(lowStock);
                setExpiringProducts(expiring);
            };

            // Create sample users
            const createSampleUsers = () => {
                const sampleUsers = [
                    {
                        id: generateId(),
                        username: 'operator',
                        password: 'operator123',
                        display_name: 'POS Operator',
                        role: 'operator',
                        status: 'active',
                        permissions: ['pos', 'view_sales']
                    },
                    {
                        id: generateId(),
                        username: 'manager',
                        password: 'manager123',
                        display_name: 'Store Manager',
                        role: 'manager',
                        status: 'active',
                        permissions: ['all']
                    }

                ];

                setUsers(sampleUsers);
                safeSetJSON('users', sampleUsers);
            };

            // Create sample sales with validation
            const createSampleSales = () => {
                const operatorUser = users.find(u => u.role === 'operator') || { id: 'operator1', display_name: 'POS Operator' };
                const sampleProductsLocal = safeParseJSON('products', []);

                const sampleSales = [
                    {
                        id: generateId(),
                        date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
                        user_id: operatorUser.id,
                        user_name: operatorUser.display_name,
                        items: [
                            {
                                id: sampleProductsLocal[0]?.id || '1',
                                name: sampleProductsLocal[0]?.name || 'Bread',
                                quantity: 2,
                                unit_price: sampleProductsLocal[0]?.sell_price || 2500,
                                total: 5000,
                                profit: 2000
                            }
                        ],
                        subtotal: 5000,
                        tax: 0,
                        total: 5000,
                        total_profit: 2000,
                        payment_method: 'cash',
                        payment_details: { amountReceived: 5000, change: 0 }
                    },
                    {
                        id: generateId(),
                        date: new Date().toISOString(),
                        user_id: operatorUser.id,
                        user_name: operatorUser.display_name,
                        items: [
                            {
                                id: sampleProductsLocal[1]?.id || '2',
                                name: sampleProductsLocal[1]?.name || 'Milk 1L',
                                quantity: 1,
                                unit_price: sampleProductsLocal[1]?.sell_price || 3200,
                                total: 3200,
                                profit: 1200
                            },
                            {
                                id: sampleProductsLocal[2]?.id || '3',
                                name: sampleProductsLocal[2]?.name || 'Rice 5kg',
                                quantity: 1,
                                unit_price: sampleProductsLocal[2]?.sell_price || 15000,
                                total: 15000,
                                profit: 3000
                            }
                        ],
                        subtotal: 18200,
                        tax: 0,
                        total: 18200,
                        total_profit: 4200,
                        payment_method: 'mpesa',
                        payment_details: { phoneNumber: '255712345678', transactionId: 'TXN123456' }
                    }
                ];

                // Update products' items_sold for demo
                const updatedProducts = sampleProductsLocal.map(p => {
                    const soldItem = sampleSales.flatMap(s => s.items).find(item => item.id === p.id);
                    if (soldItem) {
                        return { ...p, items_sold: (p.items_sold || 0) + soldItem.quantity };
                    }
                    return p;
                });

                safeSetJSON('products', updatedProducts);
                setProducts(updatedProducts);

                setSales(sampleSales);
                safeSetJSON('sales', sampleSales);
            };

            // Toast system
            const showToast = (message, type = 'success') => {
                const id = generateId();
                const toast = { id, message, type };
                setToasts(prev => [...prev, toast]);

                setTimeout(() => {
                    setToasts(prev => prev.filter(t => t.id !== id));
                }, 3000);
            };

            // User management functions
            const openAddUserModal = () => {
                setEditingUser(null);
                setShowUserModal(true);
            };

            const openEditUserModal = (user) => {
                setEditingUser(user);
                setShowUserModal(true);
            };

            const saveUser = (userData) => {
                if (editingUser) {
                    const updatedUsers = users.map(user =>
                        user.id === editingUser.id ? { ...user, ...userData } : user
                    );
                    setUsers(updatedUsers);
                    safeSetJSON('users', updatedUsers);
                    showToast('User updated successfully');
                } else {
                    const newUser = {
                        id: generateId(),
                        ...userData
                    };
                    const updatedUsers = [...users, newUser];
                    setUsers(updatedUsers);
                    safeSetJSON('users', updatedUsers);
                    showToast('User added successfully');
                }
                setShowUserModal(false);
            };

            const deleteUser = (userId) => {
                if (userId === currentUser.id) {
                    showToast('You cannot delete your own account', 'error');
                    return;
                }

                if (window.confirm('Are you sure you want to delete this user?')) {
                    const updatedUsers = users.filter(user => user.id !== userId);
                    setUsers(updatedUsers);
                    safeSetJSON('users', updatedUsers);
                    showToast('User deleted successfully');
                }
            };

            // Product management functions
            const openAddProductModal = () => {
                setEditingProduct(null);
                setShowProductModal(true);
            };

            const openEditProductModal = (product) => {
                setEditingProduct(product);
                setShowProductModal(true);
            };

            const saveProduct = (productData) => {
                if (editingProduct) {
                    const updatedProducts = products.map(product =>
                        product.id === editingProduct.id ? { ...product, ...productData } : product
                    );
                    setProducts(updatedProducts);
                    safeSetJSON('products', updatedProducts);
                    showToast('Product updated successfully');
                } else {
                    const newProduct = {
                        id: generateId(),
                        ...productData
                    };
                    const updatedProducts = [...products, newProduct];
                    setProducts(updatedProducts);
                    safeSetJSON('products', updatedProducts);
                    showToast('Product added successfully');
                }

                // Recalculate low stock and expiring products
                const updatedProductsList = safeParseJSON('products', []);
                const lowStock = updatedProductsList.filter(p => (p.available_stock || 0) <= (p.reorder_level || 0));
                const expiring = updatedProductsList.filter(p => isExpiringSoon(p.expiration_date));
                setLowStockProducts(lowStock);
                setExpiringProducts(expiring);

                setShowProductModal(false);
            };

            const deleteProduct = (productId) => {
                if (window.confirm('Are you sure you want to delete this product?')) {
                    const updatedProducts = products.filter(product => product.id !== productId);
                    setProducts(updatedProducts);
                    safeSetJSON('products', updatedProducts);

                    // Recalculate low stock and expiring products
                    const lowStock = updatedProducts.filter(p => (p.available_stock || 0) <= (p.reorder_level || 0));
                    const expiring = updatedProducts.filter(p => isExpiringSoon(p.expiration_date));
                    setLowStockProducts(lowStock);
                    setExpiringProducts(expiring);

                    showToast('Product deleted successfully');
                }
            };

            // System settings functions
            const saveSystemSettings = (settings) => {
                setSystemSettings(settings);
                safeSetJSON('systemSettings', settings);
                applyTheme(settings.theme);
                showToast('System settings saved successfully');
                setShowSettingsModal(false);
            };

            // Delete sales in range
            const deleteSalesInRange = (startDate, endDate) => {
                if (!startDate || !endDate) {
                    showToast('Please select both start and end dates', 'error');
                    return;
                }
                if (window.confirm(`Are you sure you want to delete sales from ${formatDate(startDate)} to ${formatDate(endDate)}? This action cannot be undone.`)) {
                    const filteredSales = sales.filter(sale => {
                        const saleDate = new Date(sale.date).toISOString().split('T')[0];
                        return saleDate >= startDate && saleDate <= endDate;
                    });

                    if (filteredSales.length === 0) {
                        showToast('No sales found in the selected range', 'error');
                        return;
                    }

                    const remainingSales = sales.filter(sale => {
                        const saleDate = new Date(sale.date).toISOString().split('T')[0];
                        return saleDate < startDate || saleDate > endDate;
                    });

                    setSales(remainingSales);
                    safeSetJSON('sales', remainingSales);
                    showToast(`${filteredSales.length} sales deleted successfully`);
                }
            };

            // PDF Export function for products
            const exportProductsToPDF = () => {
                if (products.length === 0) {
                    showToast('No products data to export', 'error');
                    return;
                }

                const doc = new jsPDF();

                // Add header
                doc.setFontSize(20);
                doc.setTextColor(40, 40, 150);
                doc.text(systemSettings.supermarketName.toUpperCase() + ' - PRODUCTS INVENTORY', 105, 15, { align: 'center' });

                doc.setFontSize(12);
                doc.setTextColor(100, 100, 100);
                doc.text(`Generated on: ${formatDateTime(new Date())}`, 105, 22, { align: 'center' });

                // Add summary section
                doc.setFontSize(14);
                doc.setTextColor(40, 40, 40);
                doc.text('PRODUCTS SUMMARY', 20, 35);

                doc.setFontSize(10);
                const totalProducts = products.length;
                const totalValue = products.reduce((total, product) => total + ((product.sell_price || 0) * (product.available_stock || 0)), 0);
                const lowStockCount = lowStockProducts.length;
                const expiringCount = expiringProducts.length;

                doc.text(`Total Products: ${totalProducts}`, 20, 45);
                doc.text(`Total Inventory Value: ${formatCurrency(totalValue)}`, 20, 52);
                doc.text(`Low Stock Items: ${lowStockCount}`, 20, 59);
                doc.text(`Expiring Soon: ${expiringCount}`, 20, 66);

                // Add products table
                const tableColumn = ["Name", "Category", "Stock", "Buy Price", "Sell Price", "Profit"];
                const tableRows = [];

                products.forEach(product => {
                    const profit = calculateProfit(product.buy_price, product.sell_price);
                    const productData = [
                        product.name,
                        product.category,
                        (product.available_stock || 0).toString(),
                        formatCurrency(product.buy_price),
                        formatCurrency(product.sell_price),
                        formatCurrency(profit)
                    ];
                    tableRows.push(productData);
                });

                doc.autoTable({
                    head: [tableColumn],
                    body: tableRows,
                    startY: 80,
                    theme: 'grid',
                    headStyles: { fillColor: [59, 130, 246] },
                    styles: { fontSize: 8 },
                    columnStyles: {
                        0: { cellWidth: 40 },
                        1: { cellWidth: 30 },
                        2: { cellWidth: 20 },
                        3: { cellWidth: 30 },
                        4: { cellWidth: 30 },
                        5: { cellWidth: 30 }
                    }
                });

                // Add footer
                const pageCount = doc.internal.getNumberOfPages();
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i);
                    doc.setFontSize(8);
                    doc.setTextColor(150, 150, 150);
                    doc.text(`Page ${i} of ${pageCount}`, 105, doc.internal.pageSize.height - 10, { align: 'center' });
                }

                // Save the PDF
                doc.save(`products_inventory_${formatDate(new Date()).replace(/\//g, '-')}.pdf`);
                showToast('Products inventory exported to PDF successfully');
            };

            // PDF Export function for sales
            const exportSalesToPDF = () => {
                if (sales.length === 0) {
                    showToast('No sales data to export', 'error');
                    return;
                }

                const doc = new jsPDF();

                // Add header
                doc.setFontSize(20);
                doc.setTextColor(40, 40, 150);
                doc.text(systemSettings.supermarketName.toUpperCase() + ' - SALES REPORT', 105, 15, { align: 'center' });

                doc.setFontSize(12);
                doc.setTextColor(100, 100, 100);
                doc.text(`Generated on: ${formatDateTime(new Date())}`, 105, 22, { align: 'center' });

                // Add summary section
                doc.setFontSize(14);
                doc.setTextColor(40, 40, 40);
                doc.text('SALES SUMMARY', 20, 35);

                doc.setFontSize(10);
                const totalRevenue = sales.reduce((total, sale) => total + (sale.total || 0), 0);
                const totalSalesCount = sales.length;
                const totalItems = sales.reduce((total, sale) => {
                    return total + (sale.items?.reduce((itemTotal, item) => itemTotal + (item.quantity || 0), 0) || 0);
                }, 0);
                const totalProfit = sales.reduce((total, sale) => total + (sale.total_profit || 0), 0);

                doc.text(`Total Sales: ${totalSalesCount}`, 20, 45);
                doc.text(`Total Revenue: ${formatCurrency(totalRevenue)}`, 20, 52);
                doc.text(`Total Items Sold: ${totalItems}`, 20, 59);
                doc.text(`Total Profit: ${formatCurrency(totalProfit)}`, 20, 66);

                // Add sales table
                const tableColumn = ["Date", "Receipt #", "Cashier", "Items", "Total", "Profit", "Payment"];
                const tableRows = [];

                sales.slice().reverse().forEach(sale => {
                    const saleData = [
                        formatDate(sale.date),
                        sale.id.slice(-8).toUpperCase(),
                        sale.user_name,
                        (sale.items?.length || 0) + " items",
                        formatCurrency(sale.total || 0),
                        formatCurrency(sale.total_profit || 0),
                        (sale.payment_method || '').toUpperCase()
                    ];
                    tableRows.push(saleData);
                });

                doc.autoTable({
                    head: [tableColumn],
                    body: tableRows,
                    startY: 80,
                    theme: 'grid',
                    headStyles: { fillColor: [59, 130, 246] },
                    styles: { fontSize: 8 },
                    columnStyles: {
                        0: { cellWidth: 25 },
                        1: { cellWidth: 25 },
                        2: { cellWidth: 25 },
                        3: { cellWidth: 20 },
                        4: { cellWidth: 25 },
                        5: { cellWidth: 25 },
                        6: { cellWidth: 20 }
                    }
                });

                // Add footer
                const pageCount = doc.internal.getNumberOfPages();
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i);
                    doc.setFontSize(8);
                    doc.setTextColor(150, 150, 150);
                    doc.text(`Page ${i} of ${pageCount}`, 105, doc.internal.pageSize.height - 10, { align: 'center' });
                }

                // Save the PDF
                doc.save(`sales_report_${formatDate(new Date()).replace(/\//g, '-')}.pdf`);
                showToast('Sales report exported to PDF successfully');
            };

            // CSV Export function
            const exportSalesToCSV = () => {
                if (sales.length === 0) {
                    showToast('No sales data to export', 'error');
                    return;
                }

                // Prepare data for CSV
                const csvData = sales.map(sale => ({
                    'Date': formatDate(sale.date),
                    'Time': formatTime(sale.date),
                    'Receipt #': sale.id.slice(-8).toUpperCase(),
                    'Cashier': sale.user_name,
                    'Items': sale.items?.map(item => `${item.name} (${item.quantity})`).join('; ') || '',
                    'Subtotal': sale.subtotal || 0,
                    'Tax': sale.tax || 0,
                    'Total': sale.total || 0,
                    'Profit': sale.total_profit || 0,
                    'Payment Method': (sale.payment_method || '').toUpperCase()
                }));

                // Convert to CSV
                const headers = Object.keys(csvData[0]);
                const csvRows = [
                    headers.join(','),
                    ...csvData.map(row =>
                        headers.map(header => {
                            const value = row[header];
                            // Handle values that might contain commas
                            return typeof value === 'string' && value.includes(',')
                                ? `"${value}"`
                                : value;
                        }).join(',')
                    )
                ];

                const csvContent = csvRows.join('\n');
                const blob = new Blob([csvContent], { type: 'text/csv' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales_report_${formatDate(new Date()).replace(/\//g, '-')}.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                showToast('Sales report exported to CSV successfully');
            };

            // Export products to CSV
            const exportProductsToCSV = () => {
                if (products.length === 0) {
                    showToast('No products data to export', 'error');
                    return;
                }

                const csvData = products.map(product => ({
                    'Barcode': product.barcode,
                    'Name': product.name,
                    'Category': product.category,
                    'Buy Price': product.buy_price || 0,
                    'Sell Price': product.sell_price || 0,
                    'Profit': calculateProfit(product.buy_price, product.sell_price),
                    'Stock': product.available_stock || 0,
                    'Reorder Level': product.reorder_level || 0,
                    'Items Sold': product.items_sold || 0,
                    'Expiration Date': product.expiration_date || 'N/A'
                }));

                const headers = Object.keys(csvData[0]);
                const csvRows = [
                    headers.join(','),
                    ...csvData.map(row =>
                        headers.map(header => {
                            const value = row[header];
                            return typeof value === 'string' && value.includes(',')
                                ? `"${value}"`
                                : value;
                        }).join(',')
                    )
                ];

                const csvContent = csvRows.join('\n');
                const blob = new Blob([csvContent], { type: 'text/csv' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `products_inventory_${formatDate(new Date()).replace(/\//g, '-')}.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                showToast('Products inventory exported to CSV successfully');
            };

            // Dashboard statistics
            const totalRevenue = useMemo(() => {
                return sales.reduce((total, sale) => total + (sale.total || 0), 0);
            }, [sales]);

            const totalProfit = useMemo(() => {
                return sales.reduce((total, sale) => total + (sale.total_profit || 0), 0);
            }, [sales]);

            const totalProducts = products.length;
            const totalUsers = users.length;
            const totalSales = sales.length;

            // Recent sales for dashboard
            const recentSales = useMemo(() => {
                return sales.slice(-5).reverse();
            }, [sales]);

            // Enhanced Dashboard Component with Fixed Charts
            const DashboardView = () => {
                const revenueChartRef = useRef(null);
                const categoryChartRef = useRef(null);
                const paymentChartRef = useRef(null);

                // Calculate real data for dashboard
                const todaySales = useMemo(() => {
                    const today = new Date().toISOString().split('T')[0];
                    return sales.filter(sale => sale.date && sale.date.includes(today));
                }, [sales]);

                const todayRevenue = todaySales.reduce((total, sale) => total + (sale.total || 0), 0);
                const todayProfit = todaySales.reduce((total, sale) => total + (sale.total_profit || 0), 0);
                const todayItemsSold = todaySales.reduce((total, sale) => {
                    return total + (sale.items?.reduce((itemTotal, item) => itemTotal + (item.quantity || 0), 0) || 0);
                }, 0);

                const weeklySales = useMemo(() => {
                    const oneWeekAgo = new Date();
                    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
                    return sales.filter(sale => new Date(sale.date) >= oneWeekAgo);
                }, [sales]);

                const weeklyRevenue = weeklySales.reduce((total, sale) => total + (sale.total || 0), 0);
                const weeklyProfit = weeklySales.reduce((total, sale) => total + (sale.total_profit || 0), 0);
                const weeklyItemsSold = weeklySales.reduce((total, sale) => {
                    return total + (sale.items?.reduce((itemTotal, item) => itemTotal + (item.quantity || 0), 0) || 0);
                }, 0);

                // Initialize charts with cleanup
                useEffect(() => {
                    if (currentView !== 'dashboard') return;

                    let revenueChart, categoryChart, paymentChart;

                    // Revenue Chart
                    if (revenueChartRef.current) {
                        const revenueCtx = revenueChartRef.current.getContext('2d');

                        // Destroy existing chart
                        if (chartInstances.current.revenue) {
                            chartInstances.current.revenue.destroy();
                        }

                        revenueChart = new Chart(revenueCtx, {
                            type: 'line',
                            data: {
                                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                                datasets: [{
                                    label: 'Revenue',
                                    data: [1250000, 1320000, 1180000, 1450000, 1580000, 1820000, 1950000],
                                    borderColor: 'rgb(59, 130, 246)',
                                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                    tension: 0.4,
                                    fill: true
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        display: false
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function (context) {
                                                return 'TZS ' + context.parsed.y.toLocaleString();
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        ticks: {
                                            callback: function (value) {
                                                return 'TZS ' + (value / 1000000).toFixed(1) + 'M';
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        chartInstances.current.revenue = revenueChart;
                    }

                    // Category Chart
                    if (categoryChartRef.current) {
                        const categoryCtx = categoryChartRef.current.getContext('2d');

                        if (chartInstances.current.category) {
                            chartInstances.current.category.destroy();
                        }

                        categoryChart = new Chart(categoryCtx, {
                            type: 'doughnut',
                            data: {
                                labels: ['Groceries', 'Bakery', 'Dairy', 'Beverages', 'Personal Care', 'Fruits & Veg'],
                                datasets: [{
                                    data: [25, 15, 12, 18, 10, 20],
                                    backgroundColor: [
                                        'rgb(59, 130, 246)',
                                        'rgb(16, 185, 129)',
                                        'rgb(245, 158, 11)',
                                        'rgb(139, 92, 246)',
                                        'rgb(239, 68, 68)',
                                        'rgb(14, 165, 233)'
                                    ],
                                    borderWidth: 0
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'bottom'
                                    }
                                }
                            }
                        });
                        chartInstances.current.category = categoryChart;
                    }

                    // Payment Chart
                    if (paymentChartRef.current) {
                        const paymentCtx = paymentChartRef.current.getContext('2d');

                        if (chartInstances.current.payment) {
                            chartInstances.current.payment.destroy();
                        }

                        paymentChart = new Chart(paymentCtx, {
                            type: 'pie',
                            data: {
                                labels: ['Cash', 'M-PESA', 'Airtel Money', 'Tigo Pesa'],
                                datasets: [{
                                    data: [45, 35, 12, 8],
                                    backgroundColor: [
                                        'rgb(16, 185, 129)',
                                        'rgb(59, 130, 246)',
                                        'rgb(239, 68, 68)',
                                        'rgb(245, 158, 11)'
                                    ],
                                    borderWidth: 0
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'bottom'
                                    }
                                }
                            }
                        });
                        chartInstances.current.payment = paymentChart;
                    }

                    // Cleanup function
                    return () => {
                        if (revenueChart) revenueChart.destroy();
                        if (categoryChart) categoryChart.destroy();
                        if (paymentChart) paymentChart.destroy();
                    };
                }, [currentView]);

                // Export dashboard data
                const exportDashboardData = () => {
                    const dashboardData = {
                        'Total Revenue': formatCurrency(totalRevenue),
                        'Total Profit': formatCurrency(totalProfit),
                        'Total Sales': totalSales,
                        'Total Products': totalProducts,
                        'Total Users': totalUsers,
                        'Today Revenue': formatCurrency(todayRevenue),
                        'Today Profit': formatCurrency(todayProfit),
                        'Today Sales': todaySales.length,
                        'Weekly Revenue': formatCurrency(weeklyRevenue),
                        'Weekly Profit': formatCurrency(weeklyProfit),
                        'Weekly Sales': weeklySales.length,
                        'Low Stock Products': lowStockProducts.length,
                        'Expiring Products': expiringProducts.length
                    };

                    const csvData = Object.entries(dashboardData).map(([key, value]) => ({
                        'Metric': key,
                        'Value': value
                    }));

                    const headers = Object.keys(csvData[0]);
                    const csvRows = [
                        headers.join(','),
                        ...csvData.map(row =>
                            headers.map(header => {
                                const value = row[header];
                                return typeof value === 'string' && value.includes(',')
                                    ? `"${value}"`
                                    : value;
                            }).join(',')
                        )
                    ];

                    const csvContent = csvRows.join('\n');
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `dashboard_summary_${formatDate(new Date()).replace(/\//g, '-')}.csv`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    showToast('Dashboard data exported to CSV successfully');
                };

                return (
                    <div className="p-6">
                        <div className="mb-8">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <p className="text-gray-600">Welcome back, {currentUser.display_name}. Here's what's happening today.</p>
                        </div>

                        {/* Date Range Filter */}
                        <div className="bg-white dashboard-card p-6 mb-6 fade-in">
                            <div className="flex justify-between items-center">
                                <h2 className="text-lg font-bold text-gray-800">Analytics Overview</h2>
                                <div className="flex space-x-4">
                                    <select className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option>Today</option>
                                        <option selected>Last 7 Days</option>
                                        <option>Last 30 Days</option>
                                        <option>Last 90 Days</option>

                                    </select>
                                    <button
                                        onClick={exportDashboardData}
                                        className="btn-primary px-4 py-2 rounded-lg flex items-center"
                                    >
                                        <i className="fas fa-download mr-2"></i>
                                        Export Report
                                    </button>
                                </div>
                            </div>
                        </div>

                        {/* Key Metrics */}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-6">
                            <div className="stat-card p-6 fade-in">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <p className="text-blue-100">Total Revenue</p>
                                        <p className="text-2xl font-bold mt-2">{formatCurrency(totalRevenue)}</p>
                                        <div className="flex items-center mt-2">
                                            <span className="kpi-badge kpi-positive">
                                                <i className="fas fa-arrow-up mr-1"></i>
                                                12.5%
                                            </span>
                                            <span className="text-blue-100 text-sm ml-2">vs last period</span>
                                        </div>
                                    </div>
                                    <div className="bg-white bg-opacity-20 p-3 rounded-lg">
                                        <i className="fas fa-money-bill-wave text-white text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-6 fade-in delay-1">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <p className="text-pink-100">Total Profit</p>
                                        <p className="text-2xl font-bold mt-2">{formatCurrency(totalProfit)}</p>
                                        <div className="flex items-center mt-2">
                                            <span className="kpi-badge kpi-positive">
                                                <i className="fas fa-arrow-up mr-1"></i>
                                                15.2%
                                            </span>
                                            <span className="text-pink-100 text-sm ml-2">vs last period</span>
                                        </div>
                                    </div>
                                    <div className="bg-white bg-opacity-20 p-3 rounded-lg">
                                        <i className="fas fa-chart-line text-white text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-6 fade-in delay-2">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <p className="text-cyan-100">Total Sales</p>
                                        <p className="text-2xl font-bold mt-2">{totalSales}</p>
                                        <div className="flex items-center mt-2">
                                            <span className="kpi-badge kpi-positive">
                                                <i className="fas fa-arrow-up mr-1"></i>
                                                8.2%
                                            </span>
                                            <span className="text-cyan-100 text-sm ml-2">vs last period</span>
                                        </div>
                                    </div>
                                    <div className="bg-white bg-opacity-20 p-3 rounded-lg">
                                        <i className="fas fa-shopping-cart text-white text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-6 fade-in delay-3">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <p className="text-green-100">Products</p>
                                        <p className="text-2xl font-bold mt-2">{totalProducts}</p>
                                        <div className="flex items-center mt-2">
                                            <span className="kpi-badge kpi-positive">
                                                <i className="fas fa-arrow-up mr-1"></i>
                                                15.7%
                                            </span>
                                            <span className="text-green-100 text-sm ml-2">vs last period</span>
                                        </div>
                                    </div>
                                    <div className="bg-white bg-opacity-20 p-3 rounded-lg">
                                        <i className="fas fa-box text-white text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card p-6 fade-in delay-4">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <p className="text-yellow-100">Users</p>
                                        <p className="text-2xl font-bold mt-2">{totalUsers}</p>
                                        <div className="flex items-center mt-2">
                                            <span className="kpi-badge kpi-positive">
                                                <i className="fas fa-arrow-up mr-1"></i>
                                                10.2%
                                            </span>
                                            <span className="text-yellow-100 text-sm ml-2">vs last period</span>
                                        </div>
                                    </div>
                                    <div className="bg-white bg-opacity-20 p-3 rounded-lg">
                                        <i className="fas fa-users text-white text-xl"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Charts Row 1 */}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                            {/* Revenue Chart */}
                            <div className="bg-white dashboard-card p-6 fade-in">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Revenue Overview</h2>
                                    <div className="flex space-x-2">
                                        <button className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-lg">Daily</button>
                                        <button className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-lg">Weekly</button>
                                        <button className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-lg">Monthly</button>
                                    </div>
                                </div>
                                <div className="chart-container">
                                    <canvas ref={revenueChartRef}></canvas>
                                </div>
                            </div>

                            {/* Sales by Category */}
                            <div className="bg-white dashboard-card p-6 fade-in delay-1">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Sales by Category</h2>
                                    <button
                                        onClick={() => setCurrentView('reports')}
                                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    >
                                        View Details
                                    </button>
                                </div>
                                <div className="chart-container">
                                    <canvas ref={categoryChartRef}></canvas>
                                </div>
                            </div>
                        </div>

                        {/* Charts Row 2 */}
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                            {/* Payment Methods */}
                            <div className="bg-white dashboard-card p-6 fade-in">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Payment Methods</h2>
                                </div>
                                <div className="chart-container">
                                    <canvas ref={paymentChartRef}></canvas>
                                </div>
                            </div>

                            {/* Top Products */}
                            <div className="bg-white dashboard-card p-6 fade-in delay-1">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Top Products</h2>
                                    <button
                                        onClick={() => setCurrentView('products')}
                                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    >
                                        View All
                                    </button>
                                </div>
                                <div className="space-y-4">
                                    {products.slice(0, 5).map((product, index) => (
                                        <div key={product.id} className="flex items-center justify-between">
                                            <div className="flex items-center">
                                                <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                                                    <i className="fas fa-box text-blue-600"></i>
                                                </div>
                                                <div>
                                                    <p className="font-medium text-gray-800">{product.name}</p>
                                                    <p className="text-sm text-gray-500">{product.category}</p>
                                                </div>
                                            </div>
                                            <div className="text-right">
                                                <p className="font-bold text-gray-800">{formatCurrency((product.sell_price || 0) * (product.items_sold || 0))}</p>
                                                <p className="text-sm text-gray-500">{product.items_sold || 0} units</p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {/* Inventory Alerts */}
                            <div className="bg-white dashboard-card p-6 fade-in delay-2">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Inventory Alerts</h2>
                                    <button
                                        onClick={() => setCurrentView('inventory')}
                                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    >
                                        Manage
                                    </button>
                                </div>
                                <div className="space-y-4">
                                    {lowStockProducts.slice(0, 5).map(product => (
                                        <div key={product.id} className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                                            <div className="flex items-center">
                                                <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center mr-3">
                                                    <i className="fas fa-exclamation-triangle text-red-600"></i>
                                                </div>
                                                <div>
                                                    <p className="font-medium text-gray-800">{product.name}</p>
                                                    <p className="text-sm text-gray-500">Stock: {product.available_stock} units</p>
                                                </div>
                                            </div>
                                            <span className="text-red-600 font-medium">Low</span>
                                        </div>
                                    ))}

                                    {lowStockProducts.length === 0 && (
                                        <div className="text-center py-4">
                                            <p className="text-gray-500">All products are well stocked</p>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Bottom Row */}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            {/* Recent Sales */}
                            <div className="bg-white dashboard-card p-6 fade-in">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Recent Sales</h2>
                                    <button
                                        onClick={() => setCurrentView('sales')}
                                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    >
                                        View All
                                    </button>
                                </div>
                                <div className="space-y-4">
                                    {recentSales.map(sale => (
                                        <div key={sale.id} className="flex items-center justify-between border-b border-gray-100 pb-4">
                                            <div>
                                                <p className="font-medium text-gray-800">#{sale.id.slice(-8).toUpperCase()}</p>
                                                <p className="text-sm text-gray-500">{formatDate(sale.date)} {formatTime(sale.date)}</p>
                                            </div>
                                            <div className="text-right">
                                                <p className="font-bold text-gray-800">{formatCurrency(sale.total || 0)}</p>
                                                <p className="text-sm text-gray-500 capitalize">{sale.payment_method}</p>
                                                <p className="text-sm text-green-600">Profit: {formatCurrency(sale.total_profit || 0)}</p>
                                            </div>
                                        </div>
                                    ))}

                                    {recentSales.length === 0 && (
                                        <div className="text-center py-4">
                                            <p className="text-gray-500">No recent sales</p>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Staff Performance */}
                            <div className="bg-white dashboard-card p-6 fade-in delay-1">
                                <div className="flex justify-between items-center mb-6">
                                    <h2 className="text-lg font-bold text-gray-800">Staff Performance</h2>
                                    <button
                                        onClick={() => setCurrentView('users')}
                                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    >
                                        View Details
                                    </button>
                                </div>
                                <div className="space-y-4">
                                    {users.filter(user => user.role === 'operator').map(user => (
                                        <div key={user.id} className="flex items-center justify-between">
                                            <div className="flex items-center">
                                                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                                    <i className="fas fa-user text-blue-600"></i>
                                                </div>
                                                <div>
                                                    <p className="font-medium text-gray-800">{user.display_name}</p>
                                                    <div className="flex items-center">
                                                        <span className="status-indicator status-online"></span>
                                                        <span className="text-sm text-gray-500">Active</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="text-right">
                                                <p className="font-bold text-gray-800">
                                                    {formatCurrency(sales
                                                        .filter(sale => sale.user_id === user.id)
                                                        .reduce((total, sale) => total + (sale.total || 0), 0)
                                                    )}
                                                </p>
                                                <p className="text-sm text-gray-500">
                                                    {sales.filter(sale => sale.user_id === user.id).length} sales
                                                </p>
                                                <p className="text-sm text-green-600">
                                                    Profit: {formatCurrency(sales
                                                        .filter(sale => sale.user_id === user.id)
                                                        .reduce((total, sale) => total + (sale.total_profit || 0), 0)
                                                    )}
                                                </p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                );
            };

            const UsersView = () => {
                const openAddUserModal = () => {
                    setEditingUser(null);
                    setShowUserModal(true);
                };

                const openEditUserModal = (user) => {
                    setEditingUser(user);
                    setShowUserModal(true);
                };

                // Use the parent component's saveUser function directly
                const saveUser = (userData) => {
                    if (editingUser) {
                        const updatedUsers = users.map(user =>
                            user.id === editingUser.id ? { ...user, ...userData } : user
                        );
                        setUsers(updatedUsers);
                        safeSetJSON('users', updatedUsers);
                        showToast('User updated successfully');
                    } else {
                        const newUser = {
                            id: generateId(),
                            ...userData
                        };
                        const updatedUsers = [...users, newUser];
                        setUsers(updatedUsers);
                        safeSetJSON('users', updatedUsers);
                        showToast('User added successfully');
                    }
                    setShowUserModal(false);
                };

                const deleteUser = (userId) => {
                    if (userId === currentUser.id) {
                        showToast('You cannot delete your own account', 'error');
                        return;
                    }

                    if (window.confirm('Are you sure you want to delete this user?')) {
                        const updatedUsers = users.filter(user => user.id !== userId);
                        setUsers(updatedUsers);
                        safeSetJSON('users', updatedUsers);
                        showToast('User deleted successfully');
                    }
                };

                return (
                    <div className="p-6">
                        <div className="flex justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <button
                                onClick={openAddUserModal}
                                className="btn-secondary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-green-500"
                                aria-label="Add new user"
                            >
                                <i className="fas fa-plus mr-2"></i>
                                Add User
                            </button>
                        </div>

                        <div className="bg-white rounded-lg shadow-md overflow-hidden" role="table" aria-label="Users table">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Permissions</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {users.map(user => (
                                        <tr key={user.id} role="row">
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="flex items-center">
                                                    <div className="flex-shrink-0 h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                                                        <i className="fas fa-user text-blue-500" aria-hidden="true"></i>
                                                    </div>
                                                    <div className="ml-4">
                                                        <div className="text-sm font-medium text-gray-900">{user.display_name}</div>
                                                        <div className="text-sm text-gray-500">{user.username}</div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{user.username}</td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <span className={`px-2 py-1 text-xs rounded-full capitalize ${user.role === 'admin' ? 'bg-purple-100 text-purple-800' :
                                                    user.role === 'manager' ? 'bg-blue-100 text-blue-800' :
                                                        'bg-green-100 text-green-800'
                                                    }`}>
                                                    {user.role}
                                                </span>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <span className={`px-2 py-1 text-xs rounded-full ${user.status === 'active' ? 'bg-green-100 text-green-800' :
                                                    user.status === 'inactive' ? 'bg-gray-100 text-gray-800' :
                                                        'bg-red-100 text-red-800'
                                                    }`}>
                                                    {user.status}
                                                </span>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <div className="max-w-xs truncate" title={user.permissions?.join(', ')}>
                                                    {user.permissions?.join(', ')}
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                <button
                                                    onClick={() => openEditUserModal(user)}
                                                    className="text-blue-600 hover:text-blue-900 mr-3 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded"
                                                    aria-label={`Edit ${user.display_name}`}
                                                >
                                                    <i className="fas fa-edit"></i>
                                                </button>
                                                <button
                                                    onClick={() => deleteUser(user.id)}
                                                    className="text-red-600 hover:text-red-900 focus:outline-none focus:ring-2 focus:ring-red-500 rounded"
                                                    aria-label={`Delete ${user.display_name}`}
                                                >
                                                    <i className="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    ))}

                                    {users.length === 0 && (
                                        <tr>
                                            <td colSpan="6" className="px-6 py-8 text-center text-gray-500">
                                                <i className="fas fa-users text-gray-300 text-4xl mb-3 block" aria-hidden="true"></i>
                                                <p>No users found</p>
                                                <p className="text-sm mt-2">Add your first user to get started</p>
                                            </td>
                                        </tr>
                                    )}
                                </tbody>
                            </table>
                        </div>

                        <UserModal
                            isOpen={showUserModal}
                            onClose={() => setShowUserModal(false)}
                            onSave={saveUser}
                            user={editingUser}
                        />
                    </div>
                );
            };

            // Products Component
            const ProductsView = () => {
                const productsWithProfit = useMemo(() => {
                    return products.map(p => ({
                        ...p,
                        profit: calculateProfit(p.buy_price, p.sell_price)
                    }));
                }, [products]);

                return (
                    <div className="p-6">
                        <div className="flex justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <div className="flex space-x-4">
                                <button
                                    onClick={openAddProductModal}
                                    className="btn-secondary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-green-500"
                                    aria-label="Add new product"
                                >
                                    <i className="fas fa-plus mr-2"></i>
                                    Add Product
                                </button>
                                <button
                                    onClick={exportProductsToCSV}
                                    className="btn-primary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    aria-label="Export products to CSV"
                                >
                                    <i className="fas fa-download mr-2"></i>
                                    Export CSV
                                </button>
                                <button
                                    onClick={exportProductsToPDF}
                                    className="btn-accent px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-purple-500"
                                    aria-label="Export products to PDF"
                                >
                                    <i className="fas fa-file-pdf mr-2"></i>
                                    Export PDF
                                </button>
                            </div>
                        </div>

                        <div className="bg-white rounded-lg shadow-md overflow-hidden" role="table" aria-label="Products table">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Barcode</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Buy Price</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sell Price</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Profit</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {productsWithProfit.map(product => (
                                        <tr key={product.id} role="row">
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="flex items-center">
                                                    <div className="flex-shrink-0 h-10 w-10 bg-blue-100 rounded-lg flex items-center justify-center">
                                                        <i className="fas fa-box text-blue-500" aria-hidden="true"></i>
                                                    </div>
                                                    <div className="ml-4">
                                                        <div className="text-sm font-medium text-gray-900">{product.name}</div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.category}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.barcode}</td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="text-sm text-gray-500">
                                                    {product.available_stock}
                                                    {product.available_stock <= (product.reorder_level || 0) && (
                                                        <span className="ml-2 text-xs bg-red-100 text-red-800 px-2 py-1 rounded-full" role="alert">Low</span>
                                                    )}
                                                </div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{formatCurrency(product.buy_price)}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{formatCurrency(product.sell_price)}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{formatCurrency(product.profit)}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {product.expiration_date ? formatDate(product.expiration_date) : 'N/A'}
                                                {isExpiringSoon(product.expiration_date) && (
                                                    <span className="ml-2 text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full" role="alert">Soon</span>
                                                )}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                <button
                                                    onClick={() => openEditProductModal(product)}
                                                    className="text-blue-600 hover:text-blue-900 mr-3 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded"
                                                    aria-label={`Edit ${product.name}`}
                                                >
                                                    <i className="fas fa-edit"></i>
                                                </button>
                                                <button
                                                    onClick={() => deleteProduct(product.id)}
                                                    className="text-red-600 hover:text-red-900 focus:outline-none focus:ring-2 focus:ring-red-500 rounded"
                                                    aria-label={`Delete ${product.name}`}
                                                >
                                                    <i className="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>

                        <ProductModal
                            isOpen={showProductModal}
                            onClose={() => setShowProductModal(false)}
                            onSave={saveProduct}
                            product={editingProduct}
                        />
                    </div>
                );
            };

            // Sales History Component - FIXED with profit calculation and filtering
            const SalesView = () => {
                const [filterDate, setFilterDate] = useState('');
                const [startDate, setStartDate] = useState('');
                const [endDate, setEndDate] = useState('');
                const [paymentFilter, setPaymentFilter] = useState('');
                const [cashierFilter, setCashierFilter] = useState('');
                // Add separate states for deletion range to avoid conflicts
                const [deleteStartDate, setDeleteStartDate] = useState('');
                const [deleteEndDate, setDeleteEndDate] = useState('');

                const filteredSales = useMemo(() => {
                    let filtered = [...sales].reverse(); // Show latest first

                    if (filterDate) {
                        filtered = filtered.filter(sale => {
                            const saleDate = new Date(sale.date).toISOString().split('T')[0];
                            return saleDate === filterDate;
                        });
                    }

                    if (startDate && endDate) {
                        filtered = filtered.filter(sale => {
                            const saleDate = new Date(sale.date).toISOString().split('T')[0];
                            return saleDate >= startDate && saleDate <= endDate;
                        });
                    }

                    if (paymentFilter) {
                        filtered = filtered.filter(sale =>
                            sale.payment_method.toLowerCase().includes(paymentFilter.toLowerCase())
                        );
                    }

                    if (cashierFilter) {
                        filtered = filtered.filter(sale =>
                            sale.user_name.toLowerCase().includes(cashierFilter.toLowerCase())
                        );
                    }

                    return filtered;
                }, [sales, filterDate, startDate, endDate, paymentFilter, cashierFilter]);

                const totalSalesAmount = filteredSales.reduce((total, sale) => total + (sale.total || 0), 0);
                const totalProfit = filteredSales.reduce((total, sale) => total + (sale.total_profit || 0), 0);
                const totalItemsSold = filteredSales.reduce((total, sale) => {
                    return total + (sale.items?.reduce((itemTotal, item) => itemTotal + (item.quantity || 0), 0) || 0);
                }, 0);

                // Get unique cashiers for filter
                const uniqueCashiers = useMemo(() => {
                    const cashiers = [...new Set(sales.map(sale => sale.user_name))];
                    return cashiers;
                }, [sales]);

                // Clear all filters
                const clearFilters = () => {
                    setFilterDate('');
                    setStartDate('');
                    setEndDate('');
                    setPaymentFilter('');
                    setCashierFilter('');
                };

                return (
                    <div className="p-6">
                        <div className="flex justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <div className="flex space-x-4">
                                <button
                                    onClick={exportSalesToPDF}
                                    className="btn-primary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    aria-label="Export sales to PDF"
                                >
                                    <i className="fas fa-file-pdf mr-2"></i>
                                    Export PDF
                                </button>
                                <button
                                    onClick={exportSalesToCSV}
                                    className="btn-secondary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-green-500"
                                    aria-label="Export sales to CSV"
                                >
                                    <i className="fas fa-file-csv mr-2"></i>
                                    Export CSV
                                </button>
                            </div>
                        </div>

                        {/* Filters Section */}
                        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                            <div className="flex justify-between items-center mb-4">
                                <h2 className="text-lg font-bold text-gray-800">Filters</h2>
                                <button
                                    onClick={clearFilters}
                                    className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                >
                                    Clear All
                                </button>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Single Date</label>
                                    <input
                                        type="date"
                                        value={filterDate}
                                        onChange={(e) => setFilterDate(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="Filter by specific date"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                                    <input
                                        type="date"
                                        value={startDate}
                                        onChange={(e) => setStartDate(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="Start date for range filter"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                                    <input
                                        type="date"
                                        value={endDate}
                                        onChange={(e) => setEndDate(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="End date for range filter"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Payment Method</label>
                                    <select
                                        value={paymentFilter}
                                        onChange={(e) => setPaymentFilter(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="Filter by payment method"
                                    >
                                        <option value="">All Methods</option>
                                        <option value="cash">Cash</option>
                                        <option value="mpesa">M-PESA</option>
                                        <option value="airtelmoney">Airtel Money</option>
                                        <option value="tigopesa">Tigo Pesa</option>
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Cashier</label>
                                    <select
                                        value={cashierFilter}
                                        onChange={(e) => setCashierFilter(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="Filter by cashier"
                                    >
                                        <option value="">All Cashiers</option>
                                        {uniqueCashiers.map(cashier => (
                                            <option key={cashier} value={cashier}>{cashier}</option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                        </div>

                        {/* Summary Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Total Sales Summary">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-blue-100 p-3 mr-4">
                                        <i className="fas fa-shopping-cart text-blue-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Total Sales</p>
                                        <p className="text-2xl font-bold text-gray-800">{filteredSales.length}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Revenue Summary">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-green-100 p-3 mr-4">
                                        <i className="fas fa-money-bill-wave text-green-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Revenue</p>
                                        <p className="text-2xl font-bold text-gray-800">{formatCurrency(totalSalesAmount)}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Profit Summary">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-purple-100 p-3 mr-4">
                                        <i className="fas fa-chart-line text-purple-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Profit</p>
                                        <p className="text-2xl font-bold text-gray-800">{formatCurrency(totalProfit)}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Items Sold Summary">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-orange-100 p-3 mr-4">
                                        <i className="fas fa-boxes text-orange-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Items Sold</p>
                                        <p className="text-2xl font-bold text-gray-800">{totalItemsSold}</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Sales Table */}
                        <div className="bg-white rounded-lg shadow-md overflow-hidden" role="table" aria-label="Sales history table">
                            <div className="table-container">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50 sticky top-0">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date & Time</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Receipt #</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cashier</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Items</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payment</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Profit</th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {filteredSales.map(sale => (
                                            <tr key={sale.id} role="row" className="hover:bg-gray-50">
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <div className="text-sm text-gray-900">{formatDate(sale.date)}</div>
                                                    <div className="text-xs text-gray-500">{formatTime(sale.date)}</div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-mono">
                                                    #{sale.id.slice(-8).toUpperCase()}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{sale.user_name}</td>
                                                <td className="px-6 py-4 text-sm text-gray-500">
                                                    <div className="max-w-xs">
                                                        {sale.items?.map(item => (
                                                            <div key={item.id} className="mb-1">
                                                                {item.name} (x{item.quantity})
                                                            </div>
                                                        ))}
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className={`px-2 py-1 text-xs rounded-full capitalize ${sale.payment_method === 'cash' ? 'bg-green-100 text-green-800' :
                                                        sale.payment_method === 'mpesa' ? 'bg-blue-100 text-blue-800' :
                                                            'bg-purple-100 text-purple-800'
                                                        }`}>
                                                        {sale.payment_method}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-gray-900">
                                                    {formatCurrency(sale.total || 0)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-green-600">
                                                    {formatCurrency(sale.total_profit || 0)}
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {filteredSales.length === 0 && (
                                <div className="text-center py-12">
                                    <i className="fas fa-chart-line text-gray-300 text-6xl mb-4" aria-hidden="true"></i>
                                    <p className="text-gray-500 text-lg">No sales found</p>
                                    <p className="text-gray-400 text-sm mt-2">
                                        {sales.length === 0 ? 'Make a sale to see it here' : 'Try adjusting your filters'}
                                    </p>
                                </div>
                            )}
                        </div>

                        {/* Delete Sales Range */}
                        <div className="bg-white rounded-lg shadow-md p-6 mt-6">
                            <h2 className="text-lg font-bold text-gray-800 mb-4">Delete Sales in Range</h2>
                            <div className="flex space-x-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                                    <input
                                        type="date"
                                        value={deleteStartDate}
                                        onChange={(e) => setDeleteStartDate(e.target.value)}
                                        className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="Start date for deletion"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                                    <input
                                        type="date"
                                        value={deleteEndDate}
                                        onChange={(e) => setDeleteEndDate(e.target.value)}
                                        className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        aria-label="End date for deletion"
                                    />
                                </div>
                                <div className="flex items-end">
                                    <button
                                        onClick={() => deleteSalesInRange(deleteStartDate, deleteEndDate)}
                                        className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-red-500"
                                        aria-label="Delete sales in selected range"
                                    >
                                        <i className="fas fa-trash mr-2"></i>
                                        Delete Sales
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            };

            // Reports Component - FIXED with profit analytics
            const ReportsView = () => {
                const [startDate, setStartDate] = useState('');
                const [endDate, setEndDate] = useState('');
                const [reportType, setReportType] = useState('sales');

                const filteredSales = useMemo(() => {
                    let filtered = sales;

                    if (startDate) {
                        filtered = filtered.filter(sale => {
                            const saleDate = new Date(sale.date).toISOString().split('T')[0];
                            return saleDate >= startDate;
                        });
                    }

                    if (endDate) {
                        filtered = filtered.filter(sale => {
                            const saleDate = new Date(sale.date).toISOString().split('T')[0];
                            return saleDate <= endDate;
                        });
                    }

                    return filtered;
                }, [sales, startDate, endDate]);

                // Calculate comprehensive report data
                const reportData = useMemo(() => {
                    const totalRevenue = filteredSales.reduce((total, sale) => total + (sale.total || 0), 0);
                    const totalProfit = filteredSales.reduce((total, sale) => total + (sale.total_profit || 0), 0);
                    const totalItems = filteredSales.reduce((total, sale) => {
                        return total + (sale.items?.reduce((itemTotal, item) => itemTotal + (item.quantity || 0), 0) || 0);
                    }, 0);
                    const averageSale = filteredSales.length > 0 ? totalRevenue / filteredSales.length : 0;
                    const averageProfit = filteredSales.length > 0 ? totalProfit / filteredSales.length : 0;

                    // Payment method breakdown
                    const paymentBreakdown = filteredSales.reduce((acc, sale) => {
                        const method = sale.payment_method;
                        if (!acc[method]) {
                            acc[method] = { count: 0, amount: 0, profit: 0 };
                        }
                        acc[method].count += 1;
                        acc[method].amount += (sale.total || 0);
                        acc[method].profit += (sale.total_profit || 0);
                        return acc;
                    }, {});

                    // Daily sales trend
                    const dailySales = filteredSales.reduce((acc, sale) => {
                        const date = formatDate(sale.date);
                        if (!acc[date]) {
                            acc[date] = { sales: 0, revenue: 0, profit: 0 };
                        }
                        acc[date].sales += 1;
                        acc[date].revenue += (sale.total || 0);
                        acc[date].profit += (sale.total_profit || 0);
                        return acc;
                    }, {});

                    // Top selling products
                    const productSales = {};
                    filteredSales.forEach(sale => {
                        sale.items?.forEach(item => {
                            if (!productSales[item.name]) {
                                productSales[item.name] = {
                                    name: item.name,
                                    quantity: 0,
                                    revenue: 0,
                                    profit: 0
                                };
                            }
                            productSales[item.name].quantity += (item.quantity || 0);
                            productSales[item.name].revenue += (item.total || 0);
                            productSales[item.name].profit += (item.profit || 0);
                        });
                    });

                    const topProducts = Object.values(productSales)
                        .sort((a, b) => b.revenue - a.revenue)
                        .slice(0, 10);

                    // Cashier performance
                    const cashierPerformance = filteredSales.reduce((acc, sale) => {
                        const cashier = sale.user_name;
                        if (!acc[cashier]) {
                            acc[cashier] = { sales: 0, revenue: 0, profit: 0 };
                        }
                        acc[cashier].sales += 1;
                        acc[cashier].revenue += (sale.total || 0);
                        acc[cashier].profit += (sale.total_profit || 0);
                        return acc;
                    }, {});

                    return {
                        totalRevenue,
                        totalProfit,
                        totalItems,
                        averageSale,
                        averageProfit,
                        totalSales: filteredSales.length,
                        paymentBreakdown,
                        dailySales,
                        topProducts,
                        cashierPerformance
                    };
                }, [filteredSales]);

                // Export comprehensive report
                const exportComprehensiveReport = () => {
                    if (filteredSales.length === 0) {
                        showToast('No report data to export', 'error');
                        return;
                    }

                    const reportDataForExport = [
                        // Summary section
                        {
                            'Section': 'SUMMARY',
                            'Metric': 'Total Sales',
                            'Value': reportData.totalSales,
                            'Details': ''
                        },
                        {
                            'Section': 'SUMMARY',
                            'Metric': 'Total Revenue',
                            'Value': formatCurrency(reportData.totalRevenue),
                            'Details': ''
                        },
                        {
                            'Section': 'SUMMARY',
                            'Metric': 'Total Profit',
                            'Value': formatCurrency(reportData.totalProfit),
                            'Details': ''
                        },
                        {
                            'Section': 'SUMMARY',
                            'Metric': 'Total Items Sold',
                            'Value': reportData.totalItems,
                            'Details': ''
                        },
                        {
                            'Section': 'SUMMARY',
                            'Metric': 'Average Sale Value',
                            'Value': formatCurrency(reportData.averageSale),
                            'Details': ''
                        },
                        {
                            'Section': 'SUMMARY',
                            'Metric': 'Average Profit per Sale',
                            'Value': formatCurrency(reportData.averageProfit),
                            'Details': ''
                        },
                        // Empty row for spacing
                        {
                            'Section': '',
                            'Metric': '',
                            'Value': '',
                            'Details': ''
                        },
                        // Payment breakdown
                        {
                            'Section': 'PAYMENT METHODS',
                            'Metric': 'Method',
                            'Value': 'Transactions',
                            'Details': 'Amount / Profit'
                        },
                        ...Object.entries(reportData.paymentBreakdown).map(([method, data]) => ({
                            'Section': 'PAYMENT METHODS',
                            'Metric': method.toUpperCase(),
                            'Value': data.count,
                            'Details': `${formatCurrency(data.amount)} / ${formatCurrency(data.profit)}`
                        })),
                        // Empty row for spacing
                        {
                            'Section': '',
                            'Metric': '',
                            'Value': '',
                            'Details': ''
                        },
                        // Top products
                        {
                            'Section': 'TOP PRODUCTS',
                            'Metric': 'Product Name',
                            'Value': 'Quantity Sold',
                            'Details': 'Revenue / Profit'
                        },
                        ...reportData.topProducts.map((product, index) => ({
                            'Section': 'TOP PRODUCTS',
                            'Metric': product.name,
                            'Value': product.quantity,
                            'Details': `${formatCurrency(product.revenue)} / ${formatCurrency(product.profit)}`
                        }))
                    ];

                    const headers = ['Section', 'Metric', 'Value', 'Details'];
                    const csvRows = [
                        headers.join(','),
                        ...reportDataForExport.map(row =>
                            headers.map(header => {
                                const value = row[header];
                                return typeof value === 'string' && value.includes(',')
                                    ? `"${value}"`
                                    : value;
                            }).join(',')
                        )
                    ];

                    const csvContent = csvRows.join('\n');
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `comprehensive_report_${formatDate(new Date()).replace(/\//g, '-')}.csv`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    showToast('Comprehensive report exported to CSV successfully');
                };

                return (
                    <div className="p-6">
                        <div className="flex justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <div className="flex space-x-4">
                                <input
                                    type="date"
                                    value={startDate}
                                    onChange={(e) => setStartDate(e.target.value)}
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    aria-label="Start date for report"
                                />
                                <input
                                    type="date"
                                    value={endDate}
                                    onChange={(e) => setEndDate(e.target.value)}
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    aria-label="End date for report"
                                />
                                <select
                                    value={reportType}
                                    onChange={(e) => setReportType(e.target.value)}
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                    <option value="sales">Sales Report</option>
                                    <option value="products">Product Performance</option>
                                    <option value="cashiers">Cashier Performance</option>
                                </select>
                                <button
                                    onClick={exportComprehensiveReport}
                                    className="btn-primary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    aria-label="Export comprehensive report"
                                >
                                    <i className="fas fa-download mr-2"></i>
                                    Export Report
                                </button>
                            </div>
                        </div>

                        {/* Summary Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6 mb-6">
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Total Sales Report">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-blue-100 p-3 mr-4">
                                        <i className="fas fa-shopping-cart text-blue-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Total Sales</p>
                                        <p className="text-2xl font-bold text-gray-800">{reportData.totalSales}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Revenue Report">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-green-100 p-3 mr-4">
                                        <i className="fas fa-money-bill-wave text-green-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Revenue</p>
                                        <p className="text-2xl font-bold text-gray-800">{formatCurrency(reportData.totalRevenue)}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Profit Report">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-purple-100 p-3 mr-4">
                                        <i className="fas fa-chart-line text-purple-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Profit</p>
                                        <p className="text-2xl font-bold text-gray-800">{formatCurrency(reportData.totalProfit)}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Average Sale Report">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-yellow-100 p-3 mr-4">
                                        <i className="fas fa-chart-bar text-yellow-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Avg. Sale</p>
                                        <p className="text-2xl font-bold text-gray-800">{formatCurrency(reportData.averageSale)}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Average Profit Report">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-red-100 p-3 mr-4">
                                        <i className="fas fa-coins text-red-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Avg. Profit</p>
                                        <p className="text-2xl font-bold text-gray-800">{formatCurrency(reportData.averageProfit)}</p>
                                    </div>
                                </div>
                            </div>
                            <div className="bg-white rounded-lg shadow-md p-6" role="group" aria-label="Items Sold Report">
                                <div className="flex items-center">
                                    <div className="rounded-full bg-orange-100 p-3 mr-4">
                                        <i className="fas fa-boxes text-orange-500 text-xl" aria-hidden="true"></i>
                                    </div>
                                    <div>
                                        <p className="text-gray-500 text-sm">Items Sold</p>
                                        <p className="text-2xl font-bold text-gray-800">{reportData.totalItems}</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            {/* Top Products */}
                            <div className="bg-white rounded-lg shadow-md p-6">
                                <h3 className="text-lg font-bold text-gray-800 mb-4">Top Selling Products</h3>
                                <ul className="space-y-4" role="list">
                                    {reportData.topProducts.map((product, index) => (
                                        <li key={index} className="flex items-center justify-between" role="listitem">
                                            <div className="flex items-center">
                                                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                                    <span className="text-blue-500 text-sm font-bold">{index + 1}</span>
                                                </div>
                                                <div>
                                                    <p className="text-gray-800 font-medium">{product.name}</p>
                                                    <p className="text-sm text-gray-500">{product.quantity} units</p>
                                                </div>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-gray-800 font-bold">{formatCurrency(product.revenue)}</p>
                                                <p className="text-green-600 text-sm">{formatCurrency(product.profit)} profit</p>
                                            </div>
                                        </li>
                                    ))}

                                    {reportData.topProducts.length === 0 && (
                                        <div className="text-center py-4">
                                            <p className="text-gray-500">No sales data available</p>
                                        </div>
                                    )}
                                </ul>
                            </div>

                            {/* Payment Methods */}
                            <div className="bg-white rounded-lg shadow-md p-6">
                                <h3 className="text-lg font-bold text-gray-800 mb-4">Payment Methods</h3>
                                <ul className="space-y-4" role="list">
                                    {Object.entries(reportData.paymentBreakdown).map(([method, data]) => (
                                        <li key={method} className="flex items-center justify-between" role="listitem">
                                            <div className="flex items-center">
                                                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${method === 'cash' ? 'bg-green-100' :
                                                    method === 'mpesa' ? 'bg-blue-100' :
                                                        'bg-purple-100'
                                                    }`}>
                                                    <i className={`fas ${method === 'cash' ? 'fa-money-bill-wave text-green-500' :
                                                        method === 'mpesa' ? 'fa-mobile-alt text-blue-500' :
                                                            'fa-wifi text-purple-500'
                                                        }`}></i>
                                                </div>
                                                <div>
                                                    <p className="text-gray-800 font-medium capitalize">{method}</p>
                                                    <p className="text-sm text-gray-500">{data.count} transactions</p>
                                                </div>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-gray-800 font-bold">{formatCurrency(data.amount)}</p>
                                                <p className="text-green-600 text-sm">{formatCurrency(data.profit)} profit</p>
                                                <p className="text-gray-500 text-sm">
                                                    {((data.amount / reportData.totalRevenue) * 100).toFixed(1)}%
                                                </p>
                                            </div>
                                        </li>
                                    ))}

                                    {Object.keys(reportData.paymentBreakdown).length === 0 && (
                                        <div className="text-center py-4">
                                            <p className="text-gray-500">No payment data available</p>
                                        </div>
                                    )}
                                </ul>
                            </div>
                        </div>

                        {/* Cashier Performance */}
                        <div className="bg-white rounded-lg shadow-md p-6 mt-6">
                            <h3 className="text-lg font-bold text-gray-800 mb-4">Cashier Performance</h3>
                            <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cashier</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sales</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Revenue</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Profit</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Avg. Sale</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Avg. Profit</th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {Object.entries(reportData.cashierPerformance).map(([cashier, data]) => (
                                            <tr key={cashier}>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{cashier}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{data.sales}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{formatCurrency(data.revenue)}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600">{formatCurrency(data.profit)}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    {formatCurrency(data.revenue / data.sales)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600">
                                                    {formatCurrency(data.profit / data.sales)}
                                                </td>
                                            </tr>
                                        ))}

                                        {Object.keys(reportData.cashierPerformance).length === 0 && (
                                            <tr>
                                                <td colSpan="6" className="px-6 py-4 text-center text-gray-500">
                                                    No cashier performance data available
                                                </td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                );
            };

            // Inventory Component
            const InventoryView = () => {
                const abcProducts = useMemo(() => performABC(products), [products]);

                // State for filters and stock history
                const [categoryFilter, setCategoryFilter] = useState('all');
                const [expiryFilter, setExpiryFilter] = useState('all');
                const [selectedProduct, setSelectedProduct] = useState(null);
                const [showStockHistory, setShowStockHistory] = useState(false);

                // Calculate stock value and retail value with proper field mapping
                const stockValue = useMemo(() => {
                    return products.reduce((total, product) => {
                        const stock = Number(product.available_stock) || 0;
                        // Map buy_price to cost_price
                        const costPrice = Number(product.cost_price) || Number(product.buy_price) || Number(product.price) || 0;
                        return total + (stock * costPrice);
                    }, 0);
                }, [products]);

                const retailValue = useMemo(() => {
                    return products.reduce((total, product) => {
                        const stock = Number(product.available_stock) || 0;
                        // Map sell_price to selling_price
                        const sellingPrice = Number(product.selling_price) || Number(product.sell_price) || Number(product.price) || 0;
                        return total + (stock * sellingPrice);
                    }, 0);
                }, [products]);

                const potentialProfit = useMemo(() => {
                    return retailValue - stockValue;
                }, [retailValue, stockValue]);

                // Get unique categories for filter
                const categories = useMemo(() => {
                    const uniqueCategories = [...new Set(products.map(product => product.category))];
                    return uniqueCategories.filter(category => category && category.trim() !== '');
                }, [products]);

                // Filter products based on selected filters
                const filteredProducts = useMemo(() => {
                    let filtered = abcProducts;

                    // Filter by category
                    if (categoryFilter !== 'all') {
                        filtered = filtered.filter(product => product.category === categoryFilter);
                    }

                    // Filter by expiry
                    if (expiryFilter !== 'all') {
                        const today = new Date();
                        switch (expiryFilter) {
                            case 'expired':
                                filtered = filtered.filter(product =>
                                    product.expiration_date && new Date(product.expiration_date) < today
                                );
                                break;
                            case 'expiring_soon':
                                filtered = filtered.filter(product =>
                                    product.expiration_date && isExpiringSoon(product.expiration_date)
                                );
                                break;
                            case 'not_expired':
                                filtered = filtered.filter(product =>
                                    !product.expiration_date || new Date(product.expiration_date) >= today
                                );
                                break;
                            default:
                                break;
                        }
                    }

                    return filtered;
                }, [abcProducts, categoryFilter, expiryFilter]);

                // Get stock history for a product
                const getStockHistory = (productId) => {
                    // This is a placeholder - you'll need to implement based on your actual data structure
                    return [
                        { date: '2024-01-15', change: 50, type: 'purchase', newStock: 150 },
                        { date: '2024-01-20', change: -20, type: 'sale', newStock: 130 },
                        { date: '2024-01-25', change: 100, type: 'purchase', newStock: 230 },
                        { date: '2024-02-01', change: -45, type: 'sale', newStock: 185 },
                    ];
                };

                // Export inventory to CSV
                const exportInventoryToCSV = () => {
                    if (products.length === 0) {
                        showToast('No inventory data to export', 'error');
                        return;
                    }

                    const inventoryData = products.map(product => {
                        const stock = Number(product.available_stock) || 0;
                        // Map buy_price to cost_price for CSV
                        const costPrice = Number(product.cost_price) || Number(product.buy_price) || Number(product.price) || 0;
                        // Map sell_price to selling_price for CSV
                        const sellingPrice = Number(product.selling_price) || Number(product.sell_price) || Number(product.price) || 0;

                        return {
                            'Barcode': product.barcode,
                            'Name': product.name,
                            'Category': product.category,
                            'Stock': stock,
                            'Cost Price': costPrice,
                            'Selling Price': sellingPrice,
                            'Reorder Level': product.reorder_level || 0,
                            'ABC Category': abcProducts.find(p => p.id === product.id)?.abc_category || 'C',
                            'Status': stock === 0 ? 'Out of Stock' :
                                stock <= (product.reorder_level || 0) ? 'Low Stock' : 'In Stock',
                            'Expiration Date': product.expiration_date || 'N/A'
                        };
                    });

                    const headers = Object.keys(inventoryData[0]);
                    const csvRows = [
                        headers.join(','),
                        ...inventoryData.map(row =>
                            headers.map(header => {
                                const value = row[header];
                                return typeof value === 'string' && value.includes(',')
                                    ? `"${value}"`
                                    : value;
                            }).join(',')
                        )
                    ];

                    const csvContent = csvRows.join('\n');
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `inventory_report_${formatDate(new Date()).replace(/\//g, '-')}.csv`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    showToast('Inventory report exported to CSV successfully');
                };

                // View stock history for a product
                const viewStockHistory = (product) => {
                    setSelectedProduct(product);
                    setShowStockHistory(true);
                };

                return (
                    <div className="p-6">
                        <div className="flex justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <button
                                onClick={exportInventoryToCSV}
                                className="btn-primary px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-blue-500"
                                aria-label="Export inventory to CSV"
                            >
                                <i className="fas fa-download mr-2"></i>
                                Export CSV
                            </button>
                        </div>

                        {/* Stock Value and Retail Value Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                            <div className="bg-white rounded-lg shadow-md p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm font-medium text-gray-600">Total Stock Value</p>
                                        <p className="text-2xl font-bold text-blue-600">
                                            ${stockValue.toFixed(2)}
                                        </p>
                                        <p className="text-xs text-gray-500 mt-1">
                                            Based on cost price
                                        </p>
                                    </div>
                                    <div className="bg-blue-100 p-3 rounded-full">
                                        <i className="fas fa-boxes text-blue-500 text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="bg-white rounded-lg shadow-md p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm font-medium text-gray-600">Total Retail Value</p>
                                        <p className="text-2xl font-bold text-green-600">
                                            ${retailValue.toFixed(2)}
                                        </p>
                                        <p className="text-xs text-gray-500 mt-1">
                                            Based on selling price
                                        </p>
                                    </div>
                                    <div className="bg-green-100 p-3 rounded-full">
                                        <i className="fas fa-tags text-green-500 text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="bg-white rounded-lg shadow-md p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm font-medium text-gray-600">Potential Profit</p>
                                        <p className="text-2xl font-bold text-purple-600">
                                            ${potentialProfit.toFixed(2)}
                                        </p>
                                        <p className="text-xs text-gray-500 mt-1">
                                            Retail - Stock Value
                                        </p>
                                    </div>
                                    <div className="bg-purple-100 p-3 rounded-full">
                                        <i className="fas fa-chart-line text-purple-500 text-xl"></i>
                                    </div>
                                </div>
                            </div>

                            <div className="bg-white rounded-lg shadow-md p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-sm font-medium text-gray-600">Total Products</p>
                                        <p className="text-2xl font-bold text-orange-600">
                                            {products.length}
                                        </p>
                                        <p className="text-xs text-gray-500 mt-1">
                                            Active inventory items
                                        </p>
                                    </div>
                                    <div className="bg-orange-100 p-3 rounded-full">
                                        <i className="fas fa-cubes text-orange-500 text-xl"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Filters Section */}
                        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Filter by Category
                                    </label>
                                    <select
                                        value={categoryFilter}
                                        onChange={(e) => setCategoryFilter(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="all">All Categories</option>
                                        {categories.map(category => (
                                            <option key={category} value={category}>
                                                {category}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Filter by Expiry
                                    </label>
                                    <select
                                        value={expiryFilter}
                                        onChange={(e) => setExpiryFilter(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="all">All Products</option>
                                        <option value="expired">Expired</option>
                                        <option value="expiring_soon">Expiring Soon</option>
                                        <option value="not_expired">Not Expired</option>
                                    </select>
                                </div>

                                <div className="flex items-end">
                                    <button
                                        onClick={() => {
                                            setCategoryFilter('all');
                                            setExpiryFilter('all');
                                        }}
                                        className="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
                                    >
                                        Clear Filters
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                            <div className="bg-white rounded-lg shadow-md p-6">
                                <div className="flex items-center justify-between mb-4">
                                    <h2 className="text-lg font-bold text-gray-800">Low Stock Alert</h2>
                                    <span className="bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm" aria-label={`${lowStockProducts.length} low stock products`}>
                                        {lowStockProducts.length} products
                                    </span>
                                </div>

                                <ul className="space-y-4" role="list">
                                    {lowStockProducts.map(product => (
                                        <li key={product.id} className="flex items-center justify-between border-b border-gray-100 pb-3" role="listitem">
                                            <div>
                                                <p className="font-medium text-gray-800">{product.name}</p>
                                                <p className="text-sm text-gray-500">Current: {product.available_stock} • Reorder: {product.reorder_level || 0}</p>
                                            </div>
                                            <div className="text-right">
                                                <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full" role="alert">
                                                    Low Stock
                                                </span>
                                            </div>
                                        </li>
                                    ))}

                                    {lowStockProducts.length === 0 && (
                                        <div className="text-center py-4">
                                            <p className="text-gray-500">All products are well stocked</p>
                                        </div>
                                    )}
                                </ul>
                            </div>

                            <div className="bg-white rounded-lg shadow-md p-6">
                                <h2 className="text-lg font-bold text-gray-800 mb-4">ABC Analysis Summary</h2>
                                <div className="space-y-4">
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600">A Items (High Value)</span>
                                        <span className="font-bold text-red-600">{abcProducts.filter(p => p.abc_category === 'A').length}</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600">B Items (Medium Value)</span>
                                        <span className="font-bold text-yellow-600">{abcProducts.filter(p => p.abc_category === 'B').length}</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600">C Items (Low Value)</span>
                                        <span className="font-bold text-green-600">{abcProducts.filter(p => p.abc_category === 'C').length}</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Inventory Table */}
                        <div className="bg-white rounded-lg shadow-md overflow-hidden" role="table" aria-label="Inventory table">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Stock</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cost Price</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Selling Price</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Reorder Level</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ABC Category</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {filteredProducts.map(product => {
                                        const stock = Number(product.available_stock) || 0;
                                        // Map buy_price to cost_price for display
                                        const costPrice = Number(product.cost_price) || Number(product.buy_price) || Number(product.price) || 0;
                                        // Map sell_price to selling_price for display
                                        const sellingPrice = Number(product.selling_price) || Number(product.sell_price) || Number(product.price) || 0;

                                        let status = 'In Stock';
                                        let statusColor = 'bg-green-100 text-green-800';

                                        if (stock === 0) {
                                            status = 'Out of Stock';
                                            statusColor = 'bg-red-100 text-red-800';
                                        } else if (stock <= (product.reorder_level || 0)) {
                                            status = 'Low Stock';
                                            statusColor = 'bg-orange-100 text-orange-800';
                                        }

                                        let abcColor = '';
                                        switch (product.abc_category) {
                                            case 'A': abcColor = 'bg-red-100 text-red-800'; break;
                                            case 'B': abcColor = 'bg-yellow-100 text-yellow-800'; break;
                                            case 'C': abcColor = 'bg-green-100 text-green-800'; break;
                                        }

                                        return (
                                            <tr key={product.id} role="row">
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <div className="flex items-center">
                                                        <div className="flex-shrink-0 h-10 w-10 bg-blue-100 rounded-lg flex items-center justify-center">
                                                            <i className="fas fa-box text-blue-500" aria-hidden="true"></i>
                                                        </div>
                                                        <div className="ml-4">
                                                            <div className="text-sm font-medium text-gray-900">{product.name}</div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.category}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{stock}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    ${costPrice.toFixed(2)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    ${sellingPrice.toFixed(2)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.reorder_level || 0}</td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className={`px-2 py-1 text-xs rounded-full ${abcColor}`}>
                                                        {product.abc_category}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    {product.expiration_date ? formatDate(product.expiration_date) : 'N/A'}
                                                    {isExpiringSoon(product.expiration_date) && (
                                                        <span className="ml-2 text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full" role="alert">Soon</span>
                                                    )}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className={`px-2 py-1 text-xs rounded-full ${statusColor}`}>
                                                        {status}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                    <button
                                                        onClick={() => viewStockHistory(product)}
                                                        className="text-blue-600 hover:text-blue-900 focus:outline-none focus:ring-2 focus:ring-blue-500 px-2 py-1 rounded"
                                                        aria-label={`View stock history for ${product.name}`}
                                                    >
                                                        <i className="fas fa-history mr-1"></i>
                                                        History
                                                    </button>
                                                </td>
                                            </tr>
                                        );
                                    })}
                                </tbody>
                            </table>
                        </div>

                        {/* Stock History Modal */}
                        {showStockHistory && selectedProduct && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                                <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[80vh] overflow-hidden">
                                    <div className="flex justify-between items-center p-6 border-b">
                                        <h3 className="text-lg font-bold text-gray-800">
                                            Stock History - {selectedProduct.name}
                                        </h3>
                                        <button
                                            onClick={() => setShowStockHistory(false)}
                                            className="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 p-2 rounded-full"
                                            aria-label="Close stock history"
                                        >
                                            <i className="fas fa-times text-xl"></i>
                                        </button>
                                    </div>
                                    <div className="p-6 overflow-y-auto max-h-[60vh]">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-50">
                                                <tr>
                                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Change</th>
                                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">New Stock</th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {getStockHistory(selectedProduct.id).map((history, index) => (
                                                    <tr key={index}>
                                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                                                            {formatDate(history.date)}
                                                        </td>
                                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 capitalize">
                                                            {history.type}
                                                        </td>
                                                        <td className={`px-4 py-3 whitespace-nowrap text-sm font-medium ${history.change > 0 ? 'text-green-600' : 'text-red-600'
                                                            }`}>
                                                            {history.change > 0 ? '+' : ''}{history.change}
                                                        </td>
                                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                                                            {history.newStock}
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                    <div className="flex justify-end p-6 border-t">
                                        <button
                                            onClick={() => setShowStockHistory(false)}
                                            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
                                        >
                                            Close
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                );
            };

            // Settings Component
            const SettingsView = () => {
                return (
                    <div className="p-6">
                        <div className="mb-8">
                            <h1 className="text-2xl font-bold text-gray-800">ProfitPointPos</h1>
                            <p className="text-gray-600">Manage your system preferences</p>
                        </div>

                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div className="bg-white rounded-lg shadow-md p-6">
                                <h2 className="text-lg font-bold text-gray-800 mb-4">System Configuration</h2>

                                <div className="space-y-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <h3 className="font-medium text-gray-800">Supermarket Branding</h3>
                                            <p className="text-sm text-gray-500">Customize logo, name, and appearance</p>
                                        </div>
                                        <button
                                            onClick={() => setShowSettingsModal(true)}
                                            className="btn-primary px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            aria-label="Configure system settings"
                                        >
                                            Configure
                                        </button>
                                    </div>

                                    <div className="border-t border-gray-200 pt-4">
                                        <h3 className="font-medium text-gray-800 mb-2">Current Settings</h3>
                                        <div className="space-y-2 text-sm" role="list">
                                            <div className="flex justify-between" role="listitem">
                                                <span className="text-gray-600">Supermarket Name:</span>
                                                <span className="font-medium">{systemSettings.supermarketName}</span>
                                            </div>
                                            <div className="flex justify-between" role="listitem">
                                                <span className="text-gray-600">Branch Location:</span>
                                                <span className="font-medium">{systemSettings.branchLocation}</span>
                                            </div>
                                            <div className="flex justify-between" role="listitem">
                                                <span className="text-gray-600">Phone Number:</span>
                                                <span className="font-medium">{systemSettings.phoneNumber}</span>
                                            </div>
                                            <div className="flex justify-between" role="listitem">
                                                <span className="text-gray-600">Theme:</span>
                                                <span className="font-medium capitalize">{systemSettings.theme}</span>
                                            </div>
                                            <div className="flex justify-between" role="listitem">
                                                <span className="text-gray-600">Wallpaper:</span>
                                                <span className="font-medium">{systemSettings.wallpaper ? 'Enabled' : 'Disabled'}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            };

            // Sidebar Component
            const Sidebar = () => {
                const menuItems = [
                    { key: 'dashboard', label: 'Dashboard', icon: 'fa-tachometer-alt' },
                    { key: 'users', label: 'User Management', icon: 'fa-users' },
                    { key: 'products', label: 'Products', icon: 'fa-box' },
                    { key: 'sales', label: 'Sales History', icon: 'fa-chart-line' },
                    { key: 'reports', label: 'Reports', icon: 'fa-chart-bar' },
                    { key: 'inventory', label: 'Inventory', icon: 'fa-warehouse' },
                    { key: 'settings', label: 'Settings', icon: 'fa-cog' }
                ];

                return (
                    <div className={`manager-sidebar bg-gradient-to-br from-slate-800 via-blue-800 to-slate-900 text-white h-screen fixed left-0 top-0 overflow-y-auto custom-scrollbar ${sidebarCollapsed ? 'collapsed' : ''}`}>
                        <div className="p-4">
                            <div className="flex items-center justify-between mb-8">
                                {!sidebarCollapsed && (
                                    <div className="flex items-center">
                                        {systemSettings?.logo ? (
                                            <img src={systemSettings.logo} alt={`${systemSettings.supermarketName || 'Bitlynx POS'} logo`} className="h-8 w-8 mr-2 object-contain" />
                                        ) : (
                                            <i className="fas fa-shopping-cart text-blue-400 text-2xl mr-2" aria-hidden="true"></i>
                                        )}
                                        <h1 className="text-xl font-bold text-white">
                                            {systemSettings?.supermarketName || 'Bitlynx POS'}
                                        </h1>
                                    </div>
                                )}
                                <button
                                    onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                                    className="text-gray-400 hover:text-white"
                                    aria-label={sidebarCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}
                                >
                                    <i className={`fas ${sidebarCollapsed ? 'fa-chevron-right' : 'fa-chevron-left'}`}></i>
                                </button>
                            </div>

                            <nav className="space-y-2" role="navigation">
                                {menuItems.map(item => (
                                    <button
                                        key={item.key}
                                        onClick={() => setCurrentView(item.key)}
                                        className={`w-full flex items-center px-3 py-3 rounded-lg transition-all ${currentView === item.key
                                            ? 'bg-blue-600 text-white'
                                            : 'text-gray-300 hover:bg-gray-700'
                                            }`}
                                        aria-label={`Navigate to ${item.label}`}
                                    >
                                        <i className={`fas ${item.icon} ${sidebarCollapsed ? 'text-lg' : 'mr-3'}`}></i>
                                        {!sidebarCollapsed && <span>{item.label}</span>}
                                    </button>
                                ))}
                            </nav>

                            <div className="mt-8 pt-8 border-t border-gray-700">
                                <div className="flex items-center px-3 py-3">
                                    <div className="w-10 h-10 bg-blue-900 rounded-full flex items-center justify-center">
                                        <i className="fas fa-user text-blue-400" aria-hidden="true"></i>
                                    </div>
                                    {!sidebarCollapsed && (
                                        <div className="ml-3">
                                            <div className="text-sm font-medium text-white">{currentUser.display_name}</div>
                                            <div className="text-xs text-gray-400 capitalize">{currentUser.role}</div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                );
            };

            // Main render
            return (
                <div className="min-h-screen bg-gray-100">
                    <Sidebar />

                    <div className={`manager-content ${sidebarCollapsed ? 'expanded' : ''}`}>
                        <div className="bg-white shadow-sm border-b border-gray-200">
                            <div className="flex justify-between items-center px-6 py-4">
                                <div>
                                    <h1 className="text-xl font-bold text-gray-800">
                                        {currentView === 'dashboard' && 'Dashboard'}
                                        {currentView === 'users' && 'User Management'}
                                        {currentView === 'products' && 'Product Management'}
                                        {currentView === 'sales' && 'Sales History'}
                                        {currentView === 'reports' && 'Reports'}
                                        {currentView === 'inventory' && 'Inventory Management'}
                                        {currentView === 'settings' && 'Settings'}
                                    </h1>
                                </div>

                                <div className="flex items-center space-x-4">
                                    <div className="relative">
                                        <button
                                            onClick={() => setCurrentView('inventory')}
                                            className="bg-bg-grey hover:bg-grey/20 p-2 rounded-full text-white transition-colors"
                                        >
                                            <i className="fas fa-bell"></i>
                                        </button>
                                        <span className="notification-dot"></span>
                                    </div>

                                    <div className="flex items-center bg-grey px-4 py-2 rounded-lg backdrop-blur-sm">
                                        <div className="text-sm">
                                            <div className="font-medium text-white">{currentUser.display_name}</div>
                                            <div className="text-purple-200 capitalize">{currentUser.role}</div>
                                        </div>
                                    </div>

                                    <div className="flex items-center bg-gray-100 px-4 py-2 rounded-lg">
                                        <div className="text-sm">
                                            <div className="font-medium text-gray-800">{currentUser.display_name}</div>
                                            <div className="text-gray-600 capitalize">{currentUser.role}</div>
                                        </div>
                                    </div>

                                    <button
                                        onClick={onLogout}
                                        className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg flex items-center focus:outline-none focus:ring-2 focus:ring-red-500"
                                        aria-label="Logout"
                                    >
                                        <i className="fas fa-sign-out-alt mr-2"></i>
                                        Logout
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div>
                            {currentView === 'dashboard' && <DashboardView />}
                            {currentView === 'users' && <UsersView />}
                            {currentView === 'products' && <ProductsView />}
                            {currentView === 'sales' && <SalesView />}
                            {currentView === 'reports' && <ReportsView />}
                            {currentView === 'inventory' && <InventoryView />}
                            {currentView === 'settings' && <SettingsView />}
                        </div>
                    </div>

                    {/* Toast Container */}
                    <div className="fixed bottom-4 right-4 space-y-2 z-50" role="status">
                        {toasts.map(toast => (
                            <Toast key={toast.id} message={toast.message} type={toast.type} />
                        ))}
                    </div>

                    {/* System Settings Modal */}
                    <SystemSettingsModal
                        isOpen={showSettingsModal}
                        onClose={() => setShowSettingsModal(false)}
                        settings={systemSettings}
                        onSave={saveSystemSettings}
                    />
                </div>
            );
        };

        // ============================================================================
        // MAIN APPLICATION COMPONENT WITH ERROR BOUNDARY
        // ============================================================================

        // Simple Error Boundary Component
        const ErrorBoundary = ({ children }) => {
            const [hasError, setHasError] = useState(false);

            useEffect(() => {
                const handleError = (error) => {
                    console.error('Application error:', error);
                    setHasError(true);
                };

                window.addEventListener('error', handleError);
                return () => window.removeEventListener('error', handleError);
            }, []);

            if (hasError) {
                return (
                    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
                        <div className="bg-white rounded-lg shadow-lg p-8 max-w-md text-center">
                            <div className="text-red-500 text-6xl mb-4">
                                <i className="fas fa-exclamation-triangle"></i>
                            </div>
                            <h2 className="text-2xl font-bold text-gray-800 mb-4">Something went wrong</h2>
                            <p className="text-gray-600 mb-6">
                                The application encountered an error. Please refresh the page to continue.
                            </p>
                            <button
                                onClick={() => window.location.reload()}
                                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
                            >
                                Refresh Page
                            </button>
                        </div>
                    </div>
                );
            }

            return children;
        };

        const App = () => {
            const [currentUser, setCurrentUser] = useState(null);
            const [isLoading, setIsLoading] = useState(true);
            const [systemSettings, setSystemSettings] = useState({
                supermarketName: 'Bitlynx POS Pro',
                branchLocation: 'Dar es Salaam, Tanzania',
                phoneNumber: '+255 123 456 789',
                slogan: 'Quality Products, Best Prices',
                receiptFooter: 'Thank you for shopping with us! Please come again.',
                theme: 'blue',
                logo: null,
                wallpaper: null,
                wallpaperOpacity: 10,
                receiptSettings: {
                    showLogo: true,
                    showSlogan: false,
                    showPhone: false,
                    showAddress: false,
                    showThankYou: true,
                    fontSize: '12px',
                    printCustomerCopy: true,
                    printMerchantCopy: false
                }
            });

            useEffect(() => {
                // Check if user is already logged in with error handling
                try {
                    const savedUser = safeParseJSON('currentUser');
                    const savedSettings = safeParseJSON('systemSettings');

                    if (savedUser) {
                        setCurrentUser(savedUser);
                    }

                    if (savedSettings) {
                        setSystemSettings(savedSettings);
                        applyTheme(savedSettings.theme);
                    }
                } catch (error) {
                    console.error('Error loading app data:', error);
                } finally {
                    setIsLoading(false);
                }
            }, []);

            // Apply theme to document
            const applyTheme = (theme) => {
                try {
                    document.body.className = document.body.className.replace(/theme-\w+/g, '');
                    document.body.classList.add(`theme-${theme}`);
                } catch (error) {
                    console.error('Error applying theme:', error);
                }
            };

            const handleLogin = (user) => {
                setCurrentUser(user);
            };

            const handleLogout = () => {
                localStorage.removeItem('currentUser');
                setCurrentUser(null);
            };

            if (isLoading) {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-purple-900 flex items-center justify-center" aria-live="polite">
                        <div className="text-center">
                            <div className="spinner mx-auto mb-4" style={{ width: '40px', height: '40px' }}></div>
                            <p className="text-white text-lg">Loading Bitlynx POS Pro...</p>
                        </div>
                    </div>
                );
            }

            if (!currentUser) {
                return <LoginView onLogin={handleLogin} />;
            }

            // Route to appropriate app based on user role
            if (currentUser.role === 'manager' || currentUser.role === 'admin') {
                return (
                    <ErrorBoundary>
                        <ManagerApp currentUser={currentUser} onLogout={handleLogout} />
                    </ErrorBoundary>
                );
            } else {
                return (
                    <ErrorBoundary>
                        <POSApp currentUser={currentUser} onLogout={handleLogout} settings={systemSettings} />
                    </ErrorBoundary>
                );
            }
        };

        // Render the app with error handling
        try {
            const root = ReactDOM.createRoot(document.getElementById('root'));
            root.render(<App />);
        } catch (error) {
            console.error('Failed to render application:', error);
            document.getElementById('root').innerHTML = `
                <div class="min-h-screen bg-gray-100 flex items-center justify-center p-4">
                    <div class="bg-white rounded-lg shadow-lg p-8 max-w-md text-center">
                        <div class="text-red-500 text-6xl mb-4">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-800 mb-4">Render Error</h2>
                        <p class="text-gray-600 mb-6">
                            Failed to initialize the application. Please refresh the page.
                        </p>
                        <button onclick="window.location.reload()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                            Refresh Page
                        </button>
                    </div>
                </div>
            `;
        }
    </script>
</body>

</html>
